[{"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\index.js":"1","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\reportWebVitals.js":"2","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\App.js":"3","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\routes\\Routes.js":"4","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\libs\\index.js":"5","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\Home-Page.js":"6","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\RewardsPage.js":"7","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\LevelNavigationPage.js":"8","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\routes\\AuthenticatedRoute.js":"9","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\account\\SignUpPage.js":"10","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\account\\LogInPage.js":"11","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\libs\\Actions.js":"12","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\libs\\contextLib.js":"13","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Settings.js":"14","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Player-Signout.js":"15","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Profile-Image-Menu.js":"16","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Create-Player-Template.js":"17","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Request-URL.js":"18","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Birthday-Format.js":"19","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\routes\\Level-Routes.js":"20","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\localstorage\\Local-Storage-Functions.js":"21","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\images\\ProfilePictureImages.js":"22","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\libs\\Reducer.js":"23","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\LevelNavigationIndex.js":"24","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Game-Wrapper.js":"25","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\SkillNavigationPage.js":"26","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Level-List.js":"27","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\images\\MixAndMatchImages.js":"28","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Back-Button.js":"29","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\images\\ThrowEyesImages.js":"30","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\images\\CardsGameImages.js":"31","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\games\\CardsGame.js":"32","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\games\\Hop-Arms.js":"33","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\games\\Throw-Eyes.js":"34","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\games\\CardGameZoom.js":"35","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\games\\MixAndMatch.js":"36","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\LevelNavbar.js":"37","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\LevelNavComponent.js":"38","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Game-Popup.js":"39","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\images\\Monster-Images.js":"40","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\images\\Image-Functions.js":"41","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\throweyes\\Character.js":"42","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\throweyes\\Target-Template.js":"43","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\throweyes\\Target.js":"44","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\aws-exports.js":"45","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Rewards-List.js":"46","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Player-Progress-Functions.js":"47","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Level-Select-Template.js":"48"},{"size":895,"mtime":1620828353048,"results":"49","hashOfConfig":"50"},{"size":362,"mtime":1620828127671,"results":"51","hashOfConfig":"50"},{"size":328,"mtime":1620828851120,"results":"52","hashOfConfig":"50"},{"size":1078,"mtime":1620828851330,"results":"53","hashOfConfig":"50"},{"size":590,"mtime":1620828851336,"results":"54","hashOfConfig":"50"},{"size":13185,"mtime":1620828851337,"results":"55","hashOfConfig":"50"},{"size":12309,"mtime":1620828851341,"results":"56","hashOfConfig":"50"},{"size":224,"mtime":1620828353052,"results":"57","hashOfConfig":"50"},{"size":1351,"mtime":1620828851328,"results":"58","hashOfConfig":"50"},{"size":12748,"mtime":1620828851345,"results":"59","hashOfConfig":"50"},{"size":15599,"mtime":1620828851343,"results":"60","hashOfConfig":"50"},{"size":1896,"mtime":1620828353048,"results":"61","hashOfConfig":"50"},{"size":3293,"mtime":1620828851335,"results":"62","hashOfConfig":"50"},{"size":2308,"mtime":1620828851324,"results":"63","hashOfConfig":"50"},{"size":417,"mtime":1620828851320,"results":"64","hashOfConfig":"50"},{"size":1027,"mtime":1620828851321,"results":"65","hashOfConfig":"50"},{"size":1840,"mtime":1620828851313,"results":"66","hashOfConfig":"50"},{"size":660,"mtime":1620828353037,"results":"67","hashOfConfig":"50"},{"size":808,"mtime":1620828353031,"results":"68","hashOfConfig":"50"},{"size":2896,"mtime":1620828851329,"results":"69","hashOfConfig":"50"},{"size":4379,"mtime":1620828851327,"results":"70","hashOfConfig":"50"},{"size":372,"mtime":1620828353042,"results":"71","hashOfConfig":"50"},{"size":996,"mtime":1620828353049,"results":"72","hashOfConfig":"50"},{"size":2651,"mtime":1620828851338,"results":"73","hashOfConfig":"50"},{"size":4504,"mtime":1620828851315,"results":"74","hashOfConfig":"50"},{"size":2412,"mtime":1620828353053,"results":"75","hashOfConfig":"50"},{"size":17434,"mtime":1620828851316,"results":"76","hashOfConfig":"50"},{"size":2548,"mtime":1620828851326,"results":"77","hashOfConfig":"50"},{"size":468,"mtime":1620828851312,"results":"78","hashOfConfig":"50"},{"size":525,"mtime":1620828851326,"results":"79","hashOfConfig":"50"},{"size":4939,"mtime":1620828851325,"results":"80","hashOfConfig":"50"},{"size":4639,"mtime":1620828851348,"results":"81","hashOfConfig":"50"},{"size":5783,"mtime":1620828851350,"results":"82","hashOfConfig":"50"},{"size":4022,"mtime":1620828353060,"results":"83","hashOfConfig":"50"},{"size":5617,"mtime":1620828851347,"results":"84","hashOfConfig":"50"},{"size":15729,"mtime":1620828851351,"results":"85","hashOfConfig":"50"},{"size":3002,"mtime":1620828851318,"results":"86","hashOfConfig":"50"},{"size":2024,"mtime":1620828851318,"results":"87","hashOfConfig":"50"},{"size":9774,"mtime":1620828851314,"results":"88","hashOfConfig":"50"},{"size":338,"mtime":1620828353042,"results":"89","hashOfConfig":"50"},{"size":8568,"mtime":1620828353041,"results":"90","hashOfConfig":"50"},{"size":375,"mtime":1620828353046,"results":"91","hashOfConfig":"50"},{"size":560,"mtime":1620828851333,"results":"92","hashOfConfig":"50"},{"size":265,"mtime":1620828353047,"results":"93","hashOfConfig":"50"},{"size":469,"mtime":1620828695557,"results":"94","hashOfConfig":"50"},{"size":2081,"mtime":1620828851322,"results":"95","hashOfConfig":"50"},{"size":1963,"mtime":1620828851319,"results":"96","hashOfConfig":"50"},{"size":1758,"mtime":1620828851317,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"1d00n0l",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"100"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"100"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"100"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"100"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"100"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"100"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"100"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"100"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"100"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"100"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"100"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"100"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"100"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"100"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"100"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"100"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"100"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"100"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\index.js",[],["217","218"],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\reportWebVitals.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\App.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\routes\\Routes.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\libs\\index.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\Home-Page.js",["219","220","221","222","223","224","225"],"import './Home-Page.scss';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { FaPlay } from 'react-icons/fa';\r\nimport { GiLockedChest, GiOpenChest } from 'react-icons/gi';\r\nimport Settings from '../components/Settings';\r\nimport PlayerSignout from '../components/Player-Signout';\r\nimport { useAuthPlayer, useAuthUser } from '../libs';\r\nimport Axios from 'axios';\r\nimport ProfileImageMenu from '../components/Profile-Image-Menu';\r\nimport FormatBirthday from '../components/Birthday-Format';\r\nimport CreatePlayerTemplate from '../components/Create-Player-Template';\r\nimport { GetPlayersURL, CreatePlayerURL } from '../components/Request-URL';\r\nimport { createLocalPlayer, setLocalPlayerList } from '../components/localstorage/Local-Storage-Functions';\r\nimport SimpleBar from 'simplebar-react';\r\nimport { TiUserAdd } from 'react-icons/ti';\r\nimport { ProfilePictureImages } from '../components/images/ProfilePictureImages';\r\nimport { TiHome } from 'react-icons/ti';\r\nimport { SizeMe } from 'react-sizeme';\r\n\r\nexport default function HomePage() {\r\n\r\n    const currentPlayer = useAuthPlayer();\r\n    const user = useAuthUser();\r\n\r\n    const [playerList, setPlayerList] = useState([]);\r\n    const [rowWidth, setRowWidth] = useState(null);\r\n    const [contentWidth, setContentWidth] = useState(null);\r\n    const [createNewPlayer, setCreateNewPlayer] = useState(false);\r\n    const [newPlayerCreated, setNewPlayerCreated] = useState(false);\r\n    const [nickname, setNickname] = useState('');\r\n    const [birthday, setBirthday] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n    const [profileImage, setProfileImage] = useState(0);\r\n    const [rewardsButtonHover, setRewardsButtonHover] = useState(false);\r\n    const [activeProfileImage, setActiveProfileImage] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setActiveProfileImage(profileImage);\r\n    }, [profileImage])\r\n\r\n    const GetPlayers = () => {\r\n        if(user !== false) { // If using a logged in account, query DB for players\r\n            Axios.post(GetPlayersURL, {\r\n                UserName: user.attributes.sub\r\n            }).then((response) => {\r\n                setPlayerList(response.data);\r\n            }).catch((error) => {\r\n                setErrorMessage(error);\r\n            })\r\n        }\r\n        if (user === false) { // If not using an account and not logged in, use local storage if exists\r\n            setLocalPlayerList(setPlayerList);\r\n        }\r\n    }\r\n\r\n    const createPlayer = () => {\r\n        if(user !== false) { // If using a logged in account, store player in DB\r\n            Axios.post(CreatePlayerURL, {\r\n                UserName: user.attributes.sub,\r\n                nickname: nickname,\r\n                profileImage: profileImage,\r\n                birthday: FormatBirthday(birthday.toString())\r\n            }).then(() => {\r\n                hideCreatePlayer();\r\n            }).catch((error) => {\r\n                setErrorMessage(error);\r\n            })\r\n        }\r\n        else if(user === false) { // If not using an account and not logged in, store player in local storage\r\n            const localProfileImage = profileImage;\r\n            const localBirthDay = FormatBirthday(birthday.toString());\r\n            createLocalPlayer(localProfileImage, localBirthDay, nickname);\r\n        }\r\n        setBirthday(null);\r\n        setNewPlayerCreated(true);\r\n    }\r\n\r\n    useEffect(() => { // on page load display available players\r\n        GetPlayers();\r\n    }, []);\r\n\r\n    useEffect(() => { // on page load display available players\r\n        if(nickname.length > 12) {\r\n            setNickname(nickname.substring(0,12));\r\n            console.log('came here');\r\n        }\r\n    }, [nickname]);\r\n\r\n    \r\n    useEffect(() => { // if a new player is created populate the new list then display\r\n        if(newPlayerCreated === true) {\r\n            GetPlayers();\r\n            hideCreatePlayer();\r\n            setNewPlayerCreated(false);\r\n        }\r\n    }, [newPlayerCreated]);\r\n\r\n    function showCreatePlayer() {\r\n        setCreateNewPlayer(true);\r\n    }\r\n\r\n    function hideCreatePlayer() {\r\n        setCreateNewPlayer(false);\r\n    }\r\n\r\n    function validateNickName() {\r\n        if(typeof nickname == null) {\r\n            return 'Please enter a Nickname';\r\n        }\r\n        else {\r\n            if(nickname.length === 0) {\r\n                return 'Please enter a Nickname';\r\n            }\r\n            else {\r\n                for(const player of playerList) {\r\n                    if(player.NickName === nickname) {\r\n                        return 'That Nickname is already in use!';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function SetRowJustification() { // cards are cut off by the simplebar component when statically defined as centered, this is a solution\r\n        if(contentWidth > rowWidth && (contentWidth != null || rowWidth != null)) {\r\n            return '';\r\n        } else\r\n            return 'justify-content-center';\r\n    }\r\n\r\n    return(\r\n        <div className=\"App\">\r\n            <div className='row'>\r\n                {( (user !== false) && (!createNewPlayer) ) && <Settings />}\r\n                {currentPlayer.player !== false && <PlayerSignout />}\r\n            </div>\r\n            \r\n            {(currentPlayer.player === false && createNewPlayer === true) &&\r\n                <div className='d-flex align-self-start'>\r\n                    <a onClick={() => setCreateNewPlayer(false)} id='Home-Nav-Button' className='pr-2 pl-2'>\r\n                        <TiHome size={100} />\r\n                    </a>\r\n                </div>\r\n            }\r\n            {currentPlayer.player === false ?\r\n                <div className='d-flex align-items-center' style={{ minHeight: '75vh'}}>\r\n                    {createNewPlayer === false ? \r\n                        <div className=\"container-fluid mt-5\">\r\n                            {user === false &&\r\n                            <span id='Account-Creation-Prompt'>\r\n                                Keep your progress safe by creating an account&nbsp;\r\n                                <Link to={'./Login'}>\r\n                                    Click Here.\r\n                                </Link>\r\n                                <br />\r\n                            </span>}\r\n                            <div className=\"container mb-5 mt-5\">\r\n                                <div className=\"row justify-content-center\">\r\n                                    <h2>Who's playing?</h2>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"container-fluid mb-5\">      \r\n                                <div className=\"row justify-content-center\">\r\n                                    <SimpleBar style={{ maxWidth: '90vw', width: '85vw', maxHeight: '50vh' }} autoHide={false}>\r\n                                        <div className=\"container-fluid\">\r\n                                            <SizeMe\r\n                                                monitorWidth\r\n                                                refreshRate={16}>\r\n                                                {({ size }) => \r\n                                                    <div className={`row ${SetRowJustification()}`}>\r\n                                                        {setRowWidth(size.width)}\r\n                                                        <SizeMe\r\n                                                        monitorWidth\r\n                                                        refreshRate={16}>\r\n                                                            {({ size }) => \r\n                                                                <div className=\"d-flex\">\r\n                                                                {setContentWidth(size.width)}\r\n                                                                    {playerList.map(player => {\r\n                                                                        return (\r\n                                                                            <div key={player.NickName} className=\"Player-Container card mr-3\">\r\n                                                                                <a onClick={() => currentPlayer.setPlayer(player)}>\r\n                                                                                    <img className=\"card-img-top pl-2\" src={ProfilePictureImages[player.ProfilePicture].default} alt=\"Player Profile Picture\"/>\r\n                                                                                    <div className=\"card-footer\">{player.NickName}</div>\r\n                                                                                </a>\r\n                                                                            </div>\r\n                                                                        )\r\n                                                                    })}\r\n                                                                    <div id=\"Create-Player\" className=\"Player-Container card\">\r\n                                                                        <a onClick={showCreatePlayer}>\r\n                                                                            <TiUserAdd size={150} className=\"card-img-top\" />\r\n                                                                            <div className=\"card-footer\">New Player</div>\r\n                                                                        </a>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            }\r\n                                                        </SizeMe>\r\n                                                    </div>\r\n                                                }\r\n                                            </SizeMe>\r\n                                        </div>\r\n                                    </SimpleBar>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    :\r\n                        <div id=\"Create-New-Player-Container\" className=\"container-fluid\">\r\n                            <div className=\"row justify-content-center\">\r\n                                <h2>Create New Player</h2>\r\n                            </div>\r\n                            <div className=\"row justify-content-center\">\r\n                                <div id=\"Create-Player-Content\" className=\"d-inline-flex flex-column align-items-center justify-content-center\">\r\n                                <ProfileImageMenu ProfileImageState={setProfileImage} ActiveProfileImage={activeProfileImage} />\r\n                                \r\n                                {user !== false ? \r\n                                    <form id='Create-Player-Form' className=\"mt-3\">\r\n                                        {CreatePlayerTemplate(nickname, setNickname, validateNickName, setBirthday, birthday, createPlayer)}\r\n                                    </form>\r\n                                :\r\n                                    <>\r\n                                        {CreatePlayerTemplate(nickname, setNickname, validateNickName, setBirthday, birthday, createPlayer)}\r\n                                    </>\r\n                                }\r\n                                \r\n                                    {errorMessage ? <p>{errorMessage}</p> : null}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            :\r\n                <div className=\"container\">\r\n                    <div id=\"Home-Title\" className=\"row justify-content-center title\">\r\n                        <h1>JumpStart</h1>\r\n                    </div>\r\n                    <div id=\"Home-Button\" className=\"row justify-content-center\">\r\n                        <div id=\"Home-Page-Button-Flex\" className=\"d-flex justify-content-around flex-wrap\">\r\n                            <div className=\"d-flex justify-content-center\">\r\n                                <Link to=\"/Rewards\">\r\n                                    <button type=\"button\" id=\"Rewards-Button\" className=\"btn btn-primary\" onMouseEnter={() => setRewardsButtonHover(true)} onMouseLeave={() => setRewardsButtonHover(false)} >Rewards! {rewardsButtonHover === true ? <GiOpenChest /> :<GiLockedChest />}</button>\r\n                                </Link>\r\n                            </div>\r\n                            <div className=\"d-flex justify-content-center\">\r\n                                <Link to=\"/LevelNavigation\">\r\n                                    <button type=\"button\" id=\"Play-Button\" className=\"btn btn-primary\">Play! <FaPlay /></button>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n        ","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\RewardsPage.js",["226","227","228","229","230"],"import React, { useEffect, useState } from \"react\";\r\nimport { useAuthPlayer, useAuthUser } from '../libs';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Skills } from '../components/Level-List';\r\nimport SimpleBar from 'simplebar-react';\r\nimport { RiLock2Fill } from 'react-icons/ri';\r\nimport { Rewards } from '../components/Rewards-List';\r\nimport { TiHome } from 'react-icons/ti';\r\nimport { GetProgress, getSkillProgress } from '../components/Player-Progress-Functions';\r\n//import { ReactPainter } from 'react-painter';\r\n//import CanvasDraw from \"react-canvas-draw\";\r\n//import { SizeMe } from 'react-sizeme';\r\n//import { FaPaintBrush, FaEraser } from 'react-icons/fa';\r\n//import { CirclePicker } from 'react-color';\r\n//import { Dropdown } from 'react-bootstrap';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport '../components/Content-Lock.scss';\r\nimport './RewardsPage.scss';\r\n\r\nexport default function RewardsPage(props) {\r\n\r\n    const currentPlayer = useAuthPlayer();\r\n    const user = useAuthUser();\r\n    \r\n    const [unlockCount, setUnlockCount] = useState(0);\r\n    const [progress, setProgress] = useState(0);\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    useEffect(() => {\r\n        GetProgress(user, currentPlayer, setProgress, setErrorMessage);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(progress.length !== 0) {\r\n            let count = 0;\r\n            Skills.map((skill) => {\r\n                if(getSkillProgress(skill.name, progress) >= skill.numLevels) {\r\n                    count++;\r\n                }\r\n            });\r\n            setUnlockCount(count);\r\n        }\r\n    }, [progress]);\r\n\r\n    return(\r\n        <div className=\"App\">\r\n        <Link to='../' id='Home-Nav-Button' className='d-flex align-self-start'>\r\n            <TiHome size={100} />\r\n        </Link>\r\n            <div id=\"Rewards-Page-Container\" className=\"container\">\r\n                <div className=\"container\">\r\n                    <div className=\"row justify-content-center mt-3\">\r\n                        <h1 id=\"Rewards-Title\">Rewards</h1>\r\n                    </div>\r\n                </div>\r\n                <div id=\"Rewards-Content-Container\" className=\"container-fluid mb-3\">\r\n                    <SimpleBar style={{ height: '60vh' }} autoHide={false}>\r\n                        <div className=\"d-flex flex-wrap justify-content-around mt-4 rewards-content-flex\">\r\n                            {Rewards.map((reward, i) => {\r\n                                return(\r\n                                    <>\r\n                                        {unlockCount > i ?\r\n                                            <div key={'Reward-'+i} className={`d-inline-flex reward-image mb-3 unlocked-content`}>\r\n                                                <div id={reward.CharacterName + '-Unlock'}>\r\n                                                        <a href={reward.Unlock} download>\r\n                                                            <button className='btn btn-secondary'>\r\n                                                                <div className='d-flex justify-content-center'>Download</div>\r\n                                                            </button>\r\n                                                        </a>\r\n                                                        <img src={reward.Thumbnail} />\r\n                                                </div>\r\n                                            </div>\r\n                                        :\r\n                                            <div key={'Reward-'+i} className={`d-inline-flex reward-image mb-3 locked-content`}>\r\n                                            <RiLock2Fill size={80} />\r\n                                            <div className='locked-message d-flex flex-wrap'>\r\n                                                Master {(i + 1) - unlockCount} more {(i + 1) - unlockCount > 1 ? 'skills' : 'skill'} to unlock {reward.CharacterName}.\r\n                                            </div>\r\n                                                <div id={reward.CharacterName + '-Unlock'}>\r\n                                                    <img src={reward.Thumbnail} />\r\n                                                </div>\r\n                                            </div>\r\n                                        }\r\n                                    </>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </SimpleBar>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n    /*\r\n\r\n    \r\n    const [draw, setDraw] = useState(false);\r\n    const [selectedMonster, setSelectedMonster] = useState(null);\r\n    const [activeColour, setActiveColour] = useState('#000');\r\n    const [currentCanvas, setCurrentCanvas] = useState(null);\r\n    const [width, height] = useWindowDimension();\r\n\r\n    const [canvasProps, setCanvasProps] = useState({\r\n                                                        color: \"#ffc600\",\r\n                                                        width: 400,\r\n                                                        height: 400,\r\n                                                        brushRadius: 10,\r\n                                                        lazyRadius: 12,\r\n                                                        imgSrc: '',\r\n                                                    });\r\n    \r\n    let canvasHistory = [];\r\n\r\n    function useWindowDimension() {\r\n        const [dimension, setDimension] = useState([\r\n            window.innerWidth,\r\n            window.innerHeight,\r\n        ]);\r\n        useEffect(() => {\r\n            const debouncedResizeHandler = debounce(() => {\r\n                setDimension([window.innerWidth, window.innerHeight]);\r\n            }, 100); // 100ms\r\n            window.addEventListener('resize', debouncedResizeHandler);\r\n            return () => window.removeEventListener('resize', debouncedResizeHandler);\r\n        }, []); // Note this empty array. this effect should run only on mount and unmount\r\n        return dimension;\r\n      }\r\n      \r\n    function debounce(fn, ms) {\r\n        let timer;\r\n        return _ => {\r\n            clearTimeout(timer);\r\n            timer = setTimeout(_ => {\r\n                timer = null;\r\n                fn.apply(this, arguments);\r\n            }, ms);\r\n        };\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(selectedMonster != null) {\r\n            setCanvasProps({imgSrc: selectedMonster.Unlock});\r\n        }\r\n    }, [selectedMonster])\r\n\r\n    const saveDrawing = (triggerSave, canvas) => {\r\n        triggerSave();\r\n        canvasHistory.push(canvas);\r\n    }\r\n    const Drawable = () => (\r\n        <CanvasDraw \r\n            brushColor={canvasProps.color}\r\n            brushRadius={canvasProps.brushRadius}\r\n            lazyRadius={canvasProps.lazyRadius}\r\n            canvasWidth={width * 0.6}\r\n            canvasHeight={height} \r\n            imgSrc={canvasProps.imgSrc} \r\n        />\r\n    );*/\r\n\r\n    /*\r\n    const Drawable = () => (\r\n        <ReactPainter\r\n            width={width * 0.63}\r\n            height={height * 0.63}\r\n            image={selectedMonster.Unlock}\r\n            render={({ triggerSave, canvas, setLineWidth, setColor, imageDownloadUrl }) => (\r\n                <div>\r\n                    {typeof imageDownloadUrl !== 'string' &&\r\n                        triggerSave() // on component mount, save blank image for downloading \r\n                    }\r\n                    <div className=\"d-flex justify-content-center flex-wrap\">\r\n                        <button className=\"btn btn-secondary\">\r\n                            <a href={imageDownloadUrl} download>\r\n                                Download\r\n                            </a>\r\n                        </button>\r\n                        <div className=\"d-flex mb-3\">\r\n                            <Dropdown>\r\n                                <div className='d-flex' style={{backgroundColor: activeColour}}>\r\n                                    <Dropdown.Toggle variant=\"success\" id=\"Colour-Palette-Dropdown\">\r\n                                        something\r\n                                    </Dropdown.Toggle>\r\n                                </div>\r\n                                <Dropdown.Menu>\r\n                                    <CirclePicker width={'400px'} onChangeComplete={ e => setColor(e.hex) } />\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                            <Dropdown>\r\n                                <Dropdown.Toggle variant=\"success\" id=\"Colour-Palette-Dropdown\">\r\n                                    <FaPaintBrush size={30} />\r\n                                </Dropdown.Toggle>\r\n                                <Dropdown.Menu>\r\n                                    <div className=\"d-flex align-items-end mr-2\"><a onClick={() => setLineWidth(5)}><FaPaintBrush size={30} /></a></div>\r\n                                    <div className=\"d-flex align-items-end mr-2\"><a onClick={() => setLineWidth(13)}><FaPaintBrush size={40} /></a></div>\r\n                                    <div className=\"d-flex align-items-end\"><a onClick={() => setLineWidth(22)}><FaPaintBrush size={50} /></a></div>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"Drawing-Canvas\" className=\"d-flex justify-content-center\" onMouseUp={() => saveDrawing(triggerSave, canvas)}>{canvas}</div>\r\n                </div>\r\n            )}\r\n        />\r\n    );\r\n    */\r\n\r\n/*\r\n{draw === false ?\r\n                <div id=\"Rewards-Page-Container\" className=\"container\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row justify-content-center mt-3\">\r\n                            <h1 id=\"Rewards-Title\">Rewards</h1>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"Rewards-Content-Container\" className=\"container-fluid mb-3\">\r\n                        <SimpleBar style={{ height: '60vh' }} autoHide={false}>\r\n                            <div className=\"d-flex flex-wrap justify-content-around mt-4 rewards-content-flex\">\r\n                                {Rewards.map((reward, i) => {\r\n                                    return(\r\n                                        <>\r\n                                            {unlockCount > i ?\r\n                                                <div key={'Reward-'+i} className={`d-inline-flex reward-image mb-3`}>\r\n                                                    <div id={reward.CharacterName + '-Unlock'}>\r\n                                                        <a onClick={() => {setSelectedMonster(reward); setDraw(true);}} target='_blank'>\r\n                                                            <img src={reward.Thumbnail} />\r\n                                                        </a>\r\n                                                    </div>\r\n                                                </div>\r\n                                            :\r\n                                                <div key={'Reward-'+i} className={`d-inline-flex reward-image mb-3 locked-content`}>\r\n                                                <RiLock2Fill size={80} />\r\n                                                <div className='locked-message d-flex flex-wrap'>\r\n                                                    Master {(i + 1) - unlockCount} more {(i + 1) - unlockCount > 1 ? 'skills' : 'skill'} to unlock {reward.CharacterName}.\r\n                                                </div>\r\n                                                    <div id={reward.CharacterName + '-Unlock'}>\r\n                                                        <img src={reward.Thumbnail} />\r\n                                                    </div>\r\n                                                </div>\r\n                                            }\r\n                                        </>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </SimpleBar>\r\n                    </div>\r\n                </div>\r\n*/\r\n","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\LevelNavigationPage.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\routes\\AuthenticatedRoute.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\account\\SignUpPage.js",["231","232","233","234","235","236","237","238","239","240","241"],"import React, { useState, useEffect } from 'react';\r\nimport { signupUser, confirmUserSignUp, useAuthState, useAuthDispatch } from '../../libs';\r\nimport { Auth } from 'aws-amplify';\r\nimport { Link } from 'react-router-dom';\r\nimport { Oval } from 'react-loading-icons';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ReactCodeInput from 'react-verification-code-input';\r\nimport PasswordStrengthBar from 'react-password-strength-bar';\r\nimport './SignupPage.scss';\r\nconst passwordValidator = require('password-validator');\r\nconst isEmail = require('sane-email-validation');\r\n\r\nexport default function SignupPage() {\r\n    \r\n    const schema = new passwordValidator();\r\n    const navigate = useNavigate();\r\n\r\n    schema\r\n    .is().min(8)                                    // Minimum length 8\r\n    .is().max(16)                                  // Maximum length 100\r\n    .has().uppercase(1)                              // Must have uppercase letters\r\n    .has().lowercase()                              // Must have lowercase letters\r\n    .has().digits(1)                                // Must have at least 1 digit\r\n    .has().not().spaces()                           // Should not have spaces\r\n    .is().not().oneOf(['Passw0rd', 'Password123', 'Spacebar123', 'Qwerty123', 'Asdf123']);\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [emailFocused, setEmailFocused] = useState(false);\r\n    const [password, setPassword] = useState('');\r\n    const [passwordFocused, setPasswordFocused] = useState(false);\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [confirmPasswordFocused, setConfirmPasswordFocused] = useState(false);\r\n    const [authenticationSuccesful, setAuthenticationSuccesful] = useState(false);\r\n    const [authenticationCode, setAuthenticationCode] = useState('');\r\n    const [allValidCredentials, setAllValidCredentials] = useState(false);\r\n    const [step, setStep] = useState(0);\r\n    const [emailError, setEmailError] = useState(null);\r\n    const [passwordError, setPasswordError] = useState(null);\r\n    const [confirmPasswordError, setConfirmPasswordError] = useState(null);\r\n    const [authCodeError, setAuthCodeError] = useState(null);\r\n    const [autoCompleteSignUp, setAutoCompleteSignUp] = useState(false);\r\n\r\n    const dispatch = useAuthDispatch();\r\n    let { loading, errorMessage } = useAuthState();\r\n\r\n    useEffect(() => {\r\n        if (email.length > 0 && !emailFocused && !isEmail(email)) // If there is something in the email input field, and It's not focused, and the address Isn't valid, set error message\r\n            setEmailError(`${email} is not a valid email address.`);\r\n        else if (isEmail(email) || email.length === 0) \r\n            setEmailError(null);\r\n    }, [email, emailFocused]);\r\n\r\n    useEffect(() => {\r\n        if (!passwordFocused && !schema.validate(password) && password.length > 0) {\r\n            const errors = schema.validate(password, {list: true});\r\n            let errorMessageString = 'Password must ';\r\n            for (let i = 0; i < errors.length; i++) {\r\n                errorMessageString += `${PasswordErrorMessage(errors[i])}${(i === errors.length - 1) ? '.' : ', '}`;\r\n            }\r\n            setPasswordError(errorMessageString);\r\n        }\r\n        else if (schema.validate(password) || password.length === 0)\r\n            setPasswordError(null);\r\n    }, [passwordFocused]);\r\n\r\n    function PasswordErrorMessage(val) {\r\n        switch(val) {\r\n            case 'min':\r\n                return 'be at least 8 characters';\r\n            case 'spaces':\r\n                return 'not contain spaces';\r\n            case 'uppercase':\r\n                return 'have at least 1 uppercase letter';\r\n            case 'lowercase':\r\n                return 'have at least 1 uppercase letter';\r\n            case 'digits':\r\n                return 'have at least 2 numbers';\r\n            case 'oneOf':\r\n                return ` not be a common password: ${password}`;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (confirmPassword.length > 0 && password.length > 0 && password !== confirmPassword) {\r\n            setConfirmPasswordError('Passwords do not match.');\r\n        }\r\n        else if (password == confirmPassword || confirmPassword.length === 0)\r\n            setConfirmPasswordError(null);\r\n    }, [confirmPassword]);\r\n\r\n\r\n    useEffect(() => {\r\n        errorMessage = null;\r\n    }, []);\r\n\r\n    const handleSignUp = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            await signupUser(dispatch, { email, password });\r\n            setStep(1);\r\n        } catch (error) {\r\n            errorMessage = error;\r\n        } \r\n    }\r\n    \r\n    const confirmSignUp = async () => {\r\n        setAuthCodeError(null);\r\n        try {\r\n            await Auth.confirmSignUp(email, authenticationCode);\r\n            navigate('../Login');\r\n        } catch (error) {\r\n            setAuthCodeError(error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(authenticationCode.length === 6 && autoCompleteSignUp === true) {\r\n            confirmSignUp();\r\n            setAutoCompleteSignUp(false);\r\n        }\r\n    }, [autoCompleteSignUp]);\r\n\r\n    const validateCredentials = () => {\r\n        if(isEmail(email) && schema.validate(password) && password === confirmPassword) \r\n            setAllValidCredentials(true);\r\n        else \r\n            setAllValidCredentials(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        validateCredentials();\r\n    }, [email, password, confirmPassword, confirmPasswordError])\r\n    \r\n    useEffect(() => {\r\n        if(authenticationSuccesful === true) {\r\n            authenticationSuccesful(false);\r\n        }\r\n    }, [authenticationSuccesful])\r\n\r\n    return (\r\n        <div id=\"Signup-Background\">\r\n            <div className=\"container pb-5\">\r\n                <div id=\"Title-Row\" className=\"row\">\r\n                    <div className=\"container\">\r\n                        <div id=\"Signup-Title\" class=\"row justify-content-center\">\r\n                            <h1>JumpStart</h1>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"Signup-Content-Row\" className=\"row mt-4\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row justify-content-center\">\r\n                            <h2>{step === 0 ? 'Sign Up' : 'Confirm Sign Up'}</h2>\r\n                        </div>\r\n                        <div className=\"row justify-content-center\">\r\n                            <div id=\"Signup-Content\" className=\"d-inline-flex flex-column align-items-center justify-content-center\">\r\n                                {step === 0 &&\r\n                                    <>\r\n                                        <span>Already have an account?&nbsp;\r\n                                            <Link to='../Login'>\r\n                                                <a>Log In Here</a>\r\n                                            </Link>\r\n                                        </span>\r\n                                        <form className=\"mt-3\">\r\n                                            <div className=\"d-flex\">\r\n                                                <label htmlFor=\"email\" className=\"align-self-center\">Email</label>\r\n                                            </div>\r\n                                            <div className=\"d-flex\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input type=\"text\" id=\"email\" className=\"form-control-lg\" placeholder=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} name=\"email\" required disabled={loading} onFocus={() => setEmailFocused(true)} onBlur={() => setEmailFocused(false)} />\r\n                                                    \r\n                                                </div>\r\n                                            </div>\r\n                                            {emailError}\r\n                                            <div className=\"d-flex\">\r\n                                                <label htmlFor=\"password\" className=\"align-self-center\">Password</label>\r\n                                            </div>\r\n                                            <div className=\"d-flex\">\r\n                                                <div className=\"form-group mb-0\">\r\n                                                    <input type=\"password\" id=\"password\" className=\"form-control-lg\" placeholder=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} name=\"password\" pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\" required disabled={loading} onFocus={() => setPasswordFocused(true)} onBlur={() => setPasswordFocused(false)} />\r\n                                                    <PasswordStrengthBar className=\"pt-1 password-strength-bar\" password={password} minLength={8} />\r\n                                                </div>\r\n                                            </div>\r\n                                            {passwordError}\r\n                                            <div className=\"d-flex\">\r\n                                                <label htmlFor=\"confirmPassword\" className=\"align-self-center\">Confirm Password</label>\r\n                                            </div>\r\n                                            <div className=\"d-flex\">\r\n                                                <div className=\"form-group\">\r\n                                                    <input type=\"password\" id=\"confirmPassword\" className=\"form-control-lg\" placeholder=\"confirm password\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} name=\"confirmPassword\" pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\" required disabled={loading} onFocus={() => setConfirmPasswordFocused(true)} onBlur={() => setConfirmPasswordFocused(false)} />\r\n                                                </div>\r\n                                            </div>\r\n                                            {confirmPasswordError}\r\n                                            <div className=\"d-flex justify-content-end\">{errorMessage ? <p>{errorMessage}</p> : null}</div>\r\n                                            <div className=\"d-flex justify-content-end\">\r\n                                                {loading === true && <Oval />}<button id='Signup-Button' className={`btn btn-secondary ${allValidCredentials ? '' : 'button-disabled'}`} onClick={handleSignUp} disabled={loading}>Create</button>\r\n                                            </div>\r\n                                        </form>\r\n                                    </>\r\n                                }\r\n                                {step === 1 &&\r\n                                    <div>\r\n                                        <div className=\"d-flex pt-4\">\r\n                                            <label htmlFor=\"email\" className=\"align-self-center\">Email</label>\r\n                                        </div>\r\n                                        <div className=\"d-flex pb-4\">\r\n                                            <input type=\"text\" style={{color: \"white\"}} value={email} className=\"form-control-lg\" disabled name=\"email\" />\r\n                                        </div>\r\n                                        <div className=\"d-flex\">\r\n                                            <label htmlFor=\"authenticationCode\" className=\"align-self-center\">Authentication Code</label>\r\n                                        </div>\r\n                                        <div id=\"Auth-Code-Input-Container\" className=\"d-flex justify-content-center\">\r\n                                            <ReactCodeInput type={'number'} fields={6} autoFocus loading={loading} onChange={(code) => setAuthenticationCode(code)} onComplete={() => setAutoCompleteSignUp(true)} />\r\n                                        </div>\r\n                                        <div className=\"d-flex justify-content-center\">{authCodeError !== null ? <p>{authCodeError.message}</p> : null}</div>\r\n                                        <div className=\"d-flex justify-content-center pt-5\">\r\n                                            {loading === true && <Oval />}<button id=\"Signup-Authenticate-Button\" className='btn btn-secondary' onClick={confirmSignUp} disabled={loading} >Authenticate</button>\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\account\\LogInPage.js",["242","243","244","245","246","247","248","249","250","251","252","253","254","255"],"import { loginUser, useAuthState, useAuthDispatch } from '../../libs';\r\nimport { Auth } from 'aws-amplify';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Oval } from 'react-loading-icons';\r\nimport PasswordStrengthBar from 'react-password-strength-bar';\r\nimport ReactCodeInput from 'react-verification-code-input';\r\nimport './LoginPage.scss';\r\n\r\nconst passwordValidator = require('password-validator');\r\n\r\nexport default function LoginPage() {\r\n    \r\n    const schema = new passwordValidator();\r\n\r\n    schema\r\n    .is().min(8)                                    // Minimum length 8\r\n    .is().max(16)                                  // Maximum length 100\r\n    .has().uppercase(1)                              // Must have uppercase letters\r\n    .has().lowercase()                              // Must have lowercase letters\r\n    .has().digits(1)                                // Must have at least 1 digit\r\n    .has().not().spaces()                           // Should not have spaces\r\n    .is().not().oneOf(['Passw0rd', 'Password123', 'Spacebar123', 'Qwerty123', 'Asdf123']);\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [forgotPasswordEmail, setForgotPasswordEmail] = useState('');\r\n    const [resetPassword, setResetPassword] = useState('');\r\n    const [confirmResetPassword, setConfirmResetPassword] = useState('');\r\n    const [confirmResetPasswordError, setConfirmResetPasswordError] = useState('');\r\n    const [resetPasswordEmailError, setResetPasswordEmailError] = useState(null);\r\n    const [resetPasswordError, setResetPasswordError] = useState(null);\r\n    const [passwordFocused, setPasswordFocused] = useState(false);\r\n    const [confirmPasswordFocused, setConfirmPasswordFocused] = useState(false);\r\n    const [authCode, setAuthCode] = useState('');\r\n    const [authCodeError, setAuthCodeError] = useState(null);\r\n    const [allValidCredentials, setAllValidCredentials] = useState(false);\r\n    const [step, setStep] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const dispatch = useAuthDispatch();\r\n    \r\n    let { errorMessage } = useAuthState();\r\n\r\n    useEffect(() => {\r\n        errorMessage = null;\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!passwordFocused && !schema.validate(resetPassword) && resetPassword.length > 0) {\r\n            const errors = schema.validate(resetPassword, {list: true});\r\n            let errorMessageString = 'Password must ';\r\n            for (let i = 0; i < errors.length; i++) {\r\n                errorMessageString += `${PasswordErrorMessage(errors[i])}${(i === errors.length - 1) ? '.' : ', '}`;\r\n            }\r\n            setResetPasswordError(errorMessageString);\r\n        }\r\n        else if (schema.validate(password) || password.length === 0)\r\n            setResetPasswordError(null);\r\n    }, [passwordFocused]);\r\n\r\n    function PasswordErrorMessage(val) {\r\n        switch(val) {\r\n            case 'min':\r\n                return 'be at least 8 characters';\r\n            case 'spaces':\r\n                return 'not contain spaces';\r\n            case 'uppercase':\r\n                return 'have at least 1 uppercase letter';\r\n            case 'lowercase':\r\n                return 'have at least 1 uppercase letter';\r\n            case 'digits':\r\n                return 'have at least 2 numbers';\r\n            case 'oneOf':\r\n                return ` not be a common password: ${resetPassword}`;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (confirmResetPassword.length > 0 && resetPassword.length > 0 && resetPassword !== confirmResetPassword) {\r\n            setConfirmResetPasswordError('Passwords do not match.');\r\n        }\r\n        else if (resetPassword == confirmResetPassword || confirmResetPassword.length === 0)\r\n            setConfirmResetPasswordError(null);\r\n    }, [confirmResetPassword]);\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        try {\r\n            await loginUser(dispatch, { email, password });\r\n            setLoading(false);\r\n        } catch (error) {\r\n            errorMessage = error;\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const handleResetPassword = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        try {\r\n            await Auth.forgotPassword(forgotPasswordEmail);\r\n            setStep(2);\r\n            setResetPasswordEmailError(null);\r\n            setLoading(false);\r\n        }\r\n        catch (error) {\r\n            setResetPasswordEmailError(error);\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const handleResetPasswordAuth = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        try {\r\n            await Auth.forgotPasswordSubmit(forgotPasswordEmail, authCode, resetPassword);\r\n            setStep(0);\r\n            setResetPasswordError(null);\r\n            setLoading(false);\r\n        }\r\n        catch (error) {\r\n            setResetPasswordError(error.message);\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        validateCredentials();\r\n    }, [authCode, resetPassword, confirmResetPassword, confirmResetPasswordError]);\r\n\r\n    const validateCredentials = () => {\r\n        if(schema.validate(resetPassword) && resetPassword === confirmResetPassword && authCode.length === 6) \r\n            setAllValidCredentials(true);\r\n        else \r\n            setAllValidCredentials(false);\r\n    }\r\n\r\n    return (\r\n        <div id=\"Login-Background\">\r\n            <div className=\"container\">\r\n                <div id=\"Title-Row\" className=\"row\">\r\n                    <div className=\"container\">\r\n                        <div id=\"Login-Title\" class=\"row justify-content-center mt-5\">\r\n                            <h1>JumpStart</h1>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"Login-Content-Row\" className=\"row\">\r\n                    {step === 0 &&\r\n                        <div className=\"container\">\r\n                            <div className=\"row justify-content-center\">\r\n                                <h2>Sign In</h2>\r\n                            </div>\r\n                            <div className=\"row justify-content-center\">\r\n                                <div id=\"Login-Content\" className=\"d-inline-flex flex-column align-items-center justify-content-center\">\r\n                                    <span>Don't have an account?&nbsp;\r\n                                        <Link to='../Signup'>\r\n                                            <a>Sign Up Here</a>\r\n                                        </Link>\r\n                                    </span>\r\n                                    <form className=\"mt-3\">\r\n                                        <div className=\"d-flex\">\r\n                                            <label htmlFor=\"email\">Email</label>\r\n                                        </div>\r\n                                        <div className=\"d-flex\">\r\n                                            <div className=\"form-group\">\r\n                                                <input type=\"text\" id='email' className=\"form-control-lg\" placeholder=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} disabled={loading} />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"d-flex\">\r\n                                            <label htmlFor=\"password\" className=\"align-self-center\">Password</label>\r\n                                        </div>\r\n                                        <div className=\"d-flex\">\r\n                                            <div className=\"form-group\">\r\n                                                <input type=\"password\" id='password' className=\"form-control-lg\" placeholder=\"password\" value={password} minLength={8} onChange={(e) => setPassword(e.target.value)} disabled={loading} />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"d-flex justify-content-end\">{errorMessage ? <p>{errorMessage}</p> : null}</div>\r\n                                        <span>\r\n                                            <a id=\"Forgot-Password-Link\" onClick={() => setStep(1)}>\r\n                                                <a>Forgot your password?</a>\r\n                                            </a>\r\n                                        </span>\r\n                                        <div className=\"d-flex justify-content-end\">\r\n                                            {loading === true && <Oval />}<button id=\"Login-Button\" className='btn btn-secondary' onClick={handleLogin} disabled={loading}>login</button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {step === 1 &&\r\n                        <div className=\"container\">\r\n                            <div className=\"row justify-content-center pb-4\">\r\n                                <h2>Reset your password</h2>\r\n                            </div>\r\n                            <div className=\"row justify-content-center\">\r\n                                <div id=\"Login-Content\" className=\"d-inline-flex flex-column align-items-center justify-content-center\">\r\n                                    <span className='pb-3'>Return to login?&nbsp;\r\n                                        <a onClick={() => setStep(0)} className='return-to-login-link'>\r\n                                            <a>Click Here</a>\r\n                                        </a>\r\n                                    </span>\r\n                                    <form>\r\n                                        <div className=\"d-flex\">\r\n                                            <label htmlFor=\"email\">Email</label>\r\n                                        </div>\r\n                                        <div className=\"d-flex\">\r\n                                            <div className=\"form-group\">\r\n                                                <input type=\"text\" id='email' className=\"form-control-lg\" placeholder=\"email\" value={forgotPasswordEmail} onChange={(e) => setForgotPasswordEmail(e.target.value)} disabled={loading} />\r\n                                            </div>\r\n                                        </div>\r\n                                        {resetPasswordEmailError !== null ? <p>{resetPasswordEmailError.message}</p> : null}\r\n                                        <div className=\"d-flex justify-content-end\">\r\n                                            {loading === true && <Oval />}<button id=\"Login-Button\" className='btn btn-secondary' onClick={handleResetPassword} disabled={loading}>Reset</button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {step === 2 &&\r\n                        <div className=\"container\">\r\n                            <div className=\"row justify-content-center pb-4\">\r\n                                <h2>Check your email for the code.</h2>\r\n                            </div>\r\n                            <div className=\"row justify-content-center\">\r\n                                <form>\r\n                                    <div id=\"Login-Content\" className=\"d-inline-flex flex-column align-items-center justify-content-center\">\r\n                                        <div className=\"d-flex\">\r\n                                            <label htmlFor=\"email\">Email</label>\r\n                                        </div>\r\n                                        <div className=\"d-flex pb-4\">\r\n                                            <input type=\"text\" style={{color: \"white\"}} value={forgotPasswordEmail} className=\"form-control-lg\" disabled name=\"email\" />\r\n                                        </div>\r\n                                        <div className=\"d-flex\">\r\n                                            <label htmlFor=\"authenticationCode\" className=\"align-self-center\">Authentication Code</label>\r\n                                        </div>\r\n                                        <div id=\"Auth-Code-Input-Container\" className=\"d-flex justify-content-center\">\r\n                                            <ReactCodeInput type={'number'} fields={6} autoFocus loading={loading} onChange={(code) => setAuthCode(code)} />\r\n                                        </div>\r\n                                        <div className=\"d-flex\">\r\n                                            <label htmlFor=\"password\" className=\"align-self-center\">New Password</label>\r\n                                        </div>\r\n                                        <div className=\"d-flex\">\r\n                                            <div className=\"form-group mb-0\">\r\n                                                <input type=\"password\" id=\"password\" className=\"form-control-lg\" placeholder=\"password\" value={resetPassword} onChange={(e) => setResetPassword(e.target.value)} name=\"password\" pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\" required disabled={loading} onFocus={() => setPasswordFocused(true)} onBlur={() => setPasswordFocused(false)} />\r\n                                                <PasswordStrengthBar className=\"pt-1 password-strength-bar\" password={resetPassword} minLength={8} />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"d-flex\">\r\n                                            <label htmlFor=\"confirmPassword\" className=\"align-self-center\">Confirm New Password</label>\r\n                                        </div>\r\n                                        <div className=\"d-flex\">\r\n                                            <div className=\"form-group\">\r\n                                                <input type=\"password\" id=\"confirmPassword\" className=\"form-control-lg\" placeholder=\"confirm password\" value={confirmResetPassword} onChange={(e) => setConfirmResetPassword(e.target.value)} name=\"confirmPassword\" pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\" required disabled={loading} onFocus={() => setConfirmPasswordFocused(true)} onBlur={() => setConfirmPasswordFocused(false)} />\r\n                                            </div>\r\n                                        </div>\r\n                                        {confirmResetPasswordError}\r\n                                        {resetPasswordError}\r\n                                        <div className=\"d-flex justify-content-end\">\r\n                                            {loading === true && <Oval />}<button id=\"Reset-Password-Button\" className={`btn btn-secondary ${allValidCredentials ? '' : 'button-disabled'}`} onClick={handleResetPasswordAuth} disabled={loading}>Reset</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\libs\\Actions.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\libs\\contextLib.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Settings.js",["256","257","258","259","260","261","262"],"import Popup from 'reactjs-popup';\r\nimport { RiSettings3Fill } from 'react-icons/ri';\r\nimport { useAuthUser, useAuthDispatch, useAuthState, logout, changePassword } from '../libs';\r\nimport { useState } from 'react';\r\nimport { Oval } from 'react-loading-icons';\r\nimport './Settings.scss';\r\n\r\nexport default function Settings(props) {\r\n\tconst dispatch = useAuthDispatch();\r\n  const userData = useAuthUser();\r\n  const [popupState, setpopupState] = useState(0);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const closeModal = () => {\r\n    setOpen(false);\r\n    setpopupState(0);\r\n  }\r\n\r\n  const handleLogout = () => {\r\n    logout(dispatch);\r\n    window.location.reload(false);\r\n  }\r\n\r\n  const showVerifyDetails = () => {\r\n    setpopupState(1);\r\n  }\r\n\r\n    return (\r\n      <div className='d-flex align-self-start mr-auto'>\r\n        <button id=\"Settings-Button\" type=\"button\" className=\"btn\" onClick={() => setOpen(o => !o)}><RiSettings3Fill size={85} /></button>\r\n          <Popup \r\n              modal\r\n              open={open} \r\n              closeOnDocumentClick\r\n              closeOnEscape\r\n              onClose={closeModal}\r\n          >\r\n          {popupState === 0 &&\r\n            <div>\r\n              <a className=\"close\" onClick={closeModal}>\r\n                &times;\r\n              </a>\r\n              <div id=\"Settings-Title\" className=\"settingsContent\">\r\n                  <h3>Account Options</h3>\r\n              </div>\r\n              <div className=\"settingsContent\">\r\n                  <a onClick={showVerifyDetails}>\r\n                      Verify Details\r\n                  </a>\r\n              </div>\r\n              <div className=\"settingsContent\">\r\n                  <a onClick={handleLogout}>\r\n                      Sign Out\r\n                  </a>\r\n              </div>\r\n            </div>\r\n          }\r\n          {popupState === 1 &&\r\n            <div>\r\n              <a className=\"close\" onClick={closeModal}>\r\n                &times;\r\n              </a>\r\n              <div id=\"Settings-Title\" className=\"settingsContent\">\r\n                  <h3>Verify Details</h3>\r\n              </div>\r\n              <div className=\"settingsContent\">\r\n                {`Email: ${userData.attributes.email}`}\r\n              </div>\r\n            </div>\r\n          }\r\n      </Popup>\r\n    </div>\r\n    )\r\n}","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Player-Signout.js",["263"],"import { BiLogOut } from 'react-icons/bi'\r\nimport { useAuthPlayer } from '../libs'\r\nimport './Player-Signout.scss'\r\n\r\nexport default function PlayerSignout() {\r\n\r\n    const currentPlayer = useAuthPlayer();\r\n\r\n    return(\r\n        <div id=\"Player-Logout-Button\" className='d-flex mr-3 mt-3 ml-auto'>\r\n            <a onClick={() => currentPlayer.setPlayer(false)}><BiLogOut size={100} /></a>\r\n        </div>\r\n    )\r\n\r\n}","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Profile-Image-Menu.js",["264","265"],"import { ProfilePictureImages } from './images/ProfilePictureImages'\r\nimport SimpleBar from 'simplebar-react';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport './Profile-Image-Menu.scss'\r\n\r\nexport default function ProfileImageMenu(props) {\r\n\r\n    return (\r\n        <SimpleBar style={{ width: '70vw' }} autoHide={false}>\r\n            <div id=\"Profile-Image-Menu-Container\">\r\n                <div className=\"d-flex\">\r\n                    {ProfilePictureImages.map((image,i) => {\r\n                        return (\r\n                            <div key={i} className={`card ${props.ActiveProfileImage === i ? 'active' : ''}`}>\r\n                                <a onClick={() => props.ProfileImageState(i)}>\r\n                                    <img class=\"card-img-top\" src={image.default} alt={`Profile Picture ${i}`} />\r\n                                </a>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </SimpleBar>\r\n    )\r\n\r\n}\r\n","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Create-Player-Template.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Request-URL.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Birthday-Format.js",["266"],"\r\nexport default function FormatBirthday(date) {\r\n    let formattedBirthday = date.slice(11,15) + '-' + returnMonth(date) + '-' + date.slice(8,10)\r\n\r\n    return formattedBirthday;\r\n}\r\n\r\nfunction returnMonth(date) {\r\n    switch(date.slice(4,7)) {\r\n        case 'Jan':\r\n            return '01'\r\n        case 'Feb':\r\n            return '02'\r\n        case 'Mar': \r\n            return '03'\r\n        case 'Apr':\r\n            return '04'\r\n        case 'May':\r\n            return '05'\r\n        case 'Jun':\r\n            return '06'\r\n        case 'Jul':\r\n            return '07'\r\n        case 'Aug':\r\n            return '08'\r\n        case 'Sep':\r\n            return '09'\r\n        case 'Oct':\r\n            return '10'\r\n        case 'Nov':\r\n            return '11'\r\n        case 'Dec':\r\n            return '12'\r\n    }\r\n}","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\routes\\Level-Routes.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\localstorage\\Local-Storage-Functions.js",["267"],"const LocalIdentifier = '34CUH8sLCXUZTA79X748'; // random string is appended to created player nicknames to ensure only our local storage is used\r\n\r\nexport function getLocalPlayer(nickname) {\r\n    // If player does not exist, assume they use an authenticated account and initialize them solely for reward tracking functionality.\r\n    const localPlayer = JSON.parse(localStorage.getItem(nickname + '-' + LocalIdentifier)); \r\n    if(localPlayer === null) {\r\n        createLocalPlayer(null, null, nickname);\r\n    }\r\n    return JSON.parse(localStorage.getItem(nickname + '-' + LocalIdentifier));\r\n}\r\n\r\nexport function createLocalPlayer(localProfileImage, localBirthDay, nickname) { // create a new player with default progress\r\n    \r\n    var blankData = {\r\n        'ProfileImage': localProfileImage,\r\n        'Birthday': localBirthDay,\r\n        'Progress': {\r\n            'Balance': {\r\n                'Balance-Eyes': 0,\r\n                'Balance-Legs': 0,\r\n                'Balance-Arms': 0,\r\n            },\r\n            'Throw': {\r\n                'Throw-Eyes': 0,\r\n            },\r\n            'Kick': {\r\n                'Kick-Eyes': 0,\r\n                'Kick-Foot': 0,\r\n                'Kick-Legs': 0,\r\n            },\r\n            'Jump': {\r\n                'Jump-Feet': 0,\r\n                'Jump-Knees': 0,\r\n                'Jump-Arms': 0,\r\n            },\r\n            'Run': {\r\n                'Run-Eyes': 0,\r\n                'Run-Arms': 0,\r\n                'Run-Knees': 0,\r\n            },\r\n            'Hop': {\r\n                'Hop-Eyes': 0,\r\n                'Hop-Legs': 0,\r\n                'Hop-Arms': 0,\r\n            },\r\n            'Slide': {\r\n                'Slide-Feet': 0,\r\n            },\r\n            'Leap': {\r\n                'Leap-Eyes': 0,\r\n                'Leap-Legs': 0,\r\n            }\r\n        },\r\n        'Completed': {  },\r\n    };\r\n\r\n    localStorage.setItem(nickname + '-' + LocalIdentifier, JSON.stringify(blankData));\r\n}\r\n\r\nexport function setLocalPlayerList(setPlayerList) { // used in home page to populate the created players list\r\n    var localPlayers = [];\r\n    for(let i = 0; i < localStorage.length; i++) {\r\n        var key = localStorage.key(i).split(\"-\");\r\n        if(key[1] == LocalIdentifier) {\r\n            var temp = JSON.parse(localStorage.getItem(localStorage.key(i)))\r\n            if (temp.ProfileImage > 7 || temp.ProfileImage < 0) // If profile image is not in the defined range set it to 0\r\n                temp.ProfileImage = 0;\r\n            if(temp.ProfileImage != null || temp.Birthday != null) { // If either are null, do not load\r\n                localPlayers.push({ 'NickName': key[0], 'ProfilePicture': temp.ProfileImage });\r\n            }\r\n        }\r\n    }\r\n    setPlayerList(localPlayers);\r\n}\r\n\r\nexport function updateLocalProgress(nickname, difficulty, SkillName, GameName) { // used to update progress of a local player when a level is completed\r\n    var localPlayer = JSON.parse(localStorage.getItem(nickname + '-' + LocalIdentifier));\r\n\r\n    if(typeof localPlayer['Progress'][SkillName] === 'undefined') { // If SkillName does not exist e.g. 'Kick', initialize it\r\n        localPlayer['Progress'][SkillName] = {};\r\n    }\r\n    if(typeof localPlayer['Progress'][SkillName][GameName] === 'undefined') { // If GameName does not exist e.g. 'Kick-Legs', initialize it\r\n        localPlayer['Progress'][SkillName][GameName] = 0;\r\n    }\r\n    \r\n    if(difficulty > parseInt(localPlayer['Progress'][SkillName][GameName])) {\r\n        localPlayer['Progress'][SkillName][GameName] = difficulty;\r\n        localStorage.setItem(nickname + '-' + LocalIdentifier, JSON.stringify(localPlayer));\r\n    }\r\n}\r\n\r\n// Used for tracking unlocked rewards and popups\r\nexport function setSkillCompleted(nickname, SkillName) { // used to update progress of a local player when a level is completed\r\n    var localPlayer = JSON.parse(localStorage.getItem(nickname + '-' + LocalIdentifier));\r\n\r\n    if(typeof localPlayer['Completed'] === 'undefined') { // If Completed does not exist initialize it\r\n        localPlayer['Completed'] = {};\r\n    }\r\n    if(typeof localPlayer['Completed'][SkillName] === 'undefined') { // If SkillName does not exist e.g. 'Kick', initialize it and set completed to true\r\n        localPlayer['Completed'][SkillName] = true;\r\n        localStorage.setItem(nickname + '-' + LocalIdentifier, JSON.stringify(localPlayer));\r\n    }\r\n}\r\n\r\n","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\images\\ProfilePictureImages.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\libs\\Reducer.js",["268","269","270","271","272","273","274","275","276","277","278","279"],"export const initialState = {\r\n  loading: false,\r\n  errorMessage: null\r\n};\r\n \r\nexport const AuthReducer = (initialState, action) => {\r\n    if (action.type == \"REQUEST_LOGIN\" || action.type == \"CHANGE_PASSWORD\" || action.type == \"REQUEST_SIGNUP\" || action.type == \"REQUEST_SIGNUP_CONFIRMATION\")\r\n      return {\r\n        ...initialState,\r\n        loading: true\r\n      }\r\n\r\n    if (action.type == \"LOGIN_SUCCESS\" || action.type == \"CHANGE_PASSWORD_SUCCESS\" || action.type == \"SIGNUP_SUCCESS\" || action.type == \"SIGNUP_CONFIRMATION_SUCCESS\")\r\n      return {\r\n        ...initialState,\r\n        loading: false\r\n      }\r\n\r\n    if (action.type == \"LOGOUT\")\r\n      return {\r\n        ...initialState\r\n      }\r\n\r\n    if (action.type == \"LOGIN_ERROR\" || action.type == \"CHANGE_PASSWORD_ERROR\" || action.type == \"SIGNUP_ERROR\")\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        errorMessage: action.error\r\n      }\r\n \r\n    throw new Error(`Unhandled action type: ${action.type}`);\r\n};","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\LevelNavigationIndex.js",["280","281"],"import React, { useState, useEffect } from 'react';\r\nimport { Skills } from '../components/Level-List';\r\nimport { Link } from 'react-router-dom';\r\nimport SimpleBar from 'simplebar-react';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport LevelNavbar from '../components/LevelNavbar';\r\nimport { LevelSelectTemplate, LevelSelectTemplateLocked } from '../components/Level-Select-Template';\r\nimport { GetProgress, getSkillProgress } from '../components/Player-Progress-Functions';\r\nimport { useAuthPlayer, useAuthUser } from '../libs';\r\nimport './LevelNavigationPage.scss';\r\n\r\nexport default function LevelNavigationPage(props) {\r\n\r\n    const currentPlayer = useAuthPlayer();\r\n    const user = useAuthUser();\r\n\r\n    const [progress, setProgress] = useState([]);\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    useEffect(() => {\r\n        GetProgress(user, currentPlayer, setProgress, setErrorMessage);\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"Level-Nav-Background\">\r\n\r\n            <LevelNavbar />\r\n\r\n            <div className=\"container mt-5\">\r\n                <SimpleBar style={{ height: '60vh' }} autoHide={false}>\r\n                    <div id=\"Level-Nav\">\r\n                        <div className= \"d-flex flex-wrap justify-content-around\">\r\n                            {Skills.map((skill, i) => {\r\n                                return (\r\n                                    <div key={skill.name} className=\"d-flex\">  \r\n                                        {(skill.name === 'Catch' || skill.name === 'Underhand-Roll' || skill.name === 'Strike' || skill.name === 'Gallop') ? \r\n                                            <LevelSelectTemplateLocked completed={getSkillProgress(skill.name, progress) >= skill.numLevels} skillID={skill.id} monster={skill.monster} levelName={skill.name} skillProgress={getSkillProgress(skill.name, progress)} numLevels={skill.numLevels} />\r\n                                        :\r\n                                            <Link to={skill.to} >\r\n                                                <LevelSelectTemplate completed={getSkillProgress(skill.name, progress) >= skill.numLevels} skillID={skill.id} monster={skill.monster} levelName={skill.name} skillProgress={getSkillProgress(skill.name, progress)} numLevels={skill.numLevels} />\r\n                                            </Link>\r\n                                        } \r\n                                    </div> \r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </SimpleBar>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Game-Wrapper.js",["282","283","284"],"import React, { useState, useEffect } from 'react';\r\nimport { useAuthPlayer, useAuthUser } from '../libs';\r\nimport GamePopup from './Game-Popup';\r\nimport Axios from 'axios';\r\nimport { CreateAttemptURL, CreateLocalAttemptURL } from './Request-URL';\r\nimport { updateLocalProgress, getLocalPlayer } from './localstorage/Local-Storage-Functions';\r\n\r\nexport default function GameWrapper(props) {\r\n\r\n    const [difficulty , setDifficulty] = useState(1);\r\n    const [levelCompleted, setLevelCompleted] = useState('False');\r\n    const [attemptNumber, setAttemptNumber] = useState(0);\r\n    const [popupState, setPopupState] = useState(true);\r\n    const [startTime, setStartTime] = useState(null);\r\n    const [finishTime, setFinishTime] = useState(null);\r\n    const [timeTaken, setTimeTaken] = useState(null);\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    const currentPlayer = useAuthPlayer();\r\n    const user = useAuthUser();\r\n\r\n    const gameTitle = props.gameTitle;\r\n    const levels = props.numLevels;\r\n    \r\n    const CreateAttempt = () => {\r\n        if(user !== false) { // If using a logged in account, store player in DB\r\n            Axios.post(CreateAttemptURL, {\r\n                GameName: props.GameName,\r\n                LevelNumber: difficulty,\r\n                UserName: user.attributes.sub,\r\n                NickName: currentPlayer.player.NickName,\r\n                Succesful: levelCompleted,\r\n                TimeTaken: timeTaken\r\n            }).then((response) => {\r\n                \r\n            }).catch((error) => {\r\n                setErrorMessage(error);\r\n                console.log(error);\r\n            });\r\n        }\r\n        else if(user === false) { // If not using an account and not logged in, store player in local storage\r\n            const localPlayer = getLocalPlayer(currentPlayer.player.NickName);\r\n            const localPlayerBirthDay = localPlayer.Birthday;\r\n            \r\n            Axios.post(CreateLocalAttemptURL, {\r\n                GameName: props.GameName,\r\n                LevelNumber: difficulty,\r\n                NickName: currentPlayer.player.NickName,\r\n                BirthDay: localPlayerBirthDay,\r\n                Succesful: levelCompleted,\r\n                TimeTaken: timeTaken\r\n            }).then((response) => {\r\n                \r\n            }).catch((error) => {\r\n                setErrorMessage(error);\r\n                console.log(error);\r\n            })\r\n        }\r\n    }   \r\n\r\n    useEffect(() => {\r\n        if(popupState === false) // If the game popupscreen is set to false (closed) start the \"timer\"\r\n            setStartTime(new Date().getTime());\r\n    }, [popupState]);\r\n\r\n    useEffect(() => { // Once the finishTime state is updated calculate the total time\r\n        setTimeTaken(Math.round( ( ( (finishTime - startTime) / 1000) + Number.EPSILON) * 100) / 100 );\r\n    }, [finishTime]);\r\n    \r\n    useEffect(() => {\r\n        if( (difficulty <= levels  && timeTaken !== null && timeTaken !== 0 ) ) { // Don't create attempt when all levels have been cleared or when timer is being initialized\r\n            CreateAttempt();\r\n            if(levelCompleted === 'True') { // If level was completed set it back to false for next level and increment the difficulty\r\n                if(user === false) { // If no user is logged in, store progress in local storage\r\n                    updateLocalProgress(currentPlayer.player.NickName, difficulty, props.SkillName, props.GameName);\r\n                }\r\n                setDifficulty(difficulty + 1);\r\n                setLevelCompleted('False');\r\n            }\r\n        }\r\n    }, [timeTaken]);\r\n\r\n    return(\r\n        <div className=\"game-background\">\r\n            {props.backButton}\r\n            <GamePopup \r\n                open={popupState} \r\n                setOpen={setPopupState} \r\n                gameTitle={gameTitle} \r\n                levelsCleared={difficulty} \r\n                numLevels={levels} \r\n                levelPassed={attemptNumber < 1} \r\n                {...props}  \r\n            />\r\n                <props.Game \r\n                    setFinishTime={setFinishTime} \r\n                    difficulty={difficulty} \r\n                    setLevelCompleted={setLevelCompleted} \r\n                    popupState={popupState} \r\n                    setPopupState={setPopupState} \r\n                    attemptNumber={attemptNumber} \r\n                    setAttemptNumber={setAttemptNumber} \r\n                    {...props} \r\n                />\r\n        </div>\r\n    );\r\n\r\n}","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\SkillNavigationPage.js",["285","286"],"import React, { useState, useEffect } from 'react'\r\nimport Axios from 'axios'\r\nimport { GetLevelProgressURL } from '../components/Request-URL'\r\nimport { useAuthPlayer, useAuthUser } from '../libs'\r\nimport LevelNavComponent from '../components/LevelNavComponent'\r\nimport { getLocalPlayer } from '../components/localstorage/Local-Storage-Functions'\r\n\r\nexport default function SkillNavigationPage(props) {\r\n\r\n    const levelList = props.Levels;\r\n    const currentPlayer = useAuthPlayer()\r\n    const user = useAuthUser()\r\n\r\n    const [progress, setProgress] = useState([])\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    function getLevelProgress(GameName) {\r\n        let total = 0\r\n        for (let i = 0; i < progress.length; i++) {\r\n            if (progress[i].GameName === GameName) {\r\n                total += progress[i].LevelsCompleted\r\n            }\r\n        }\r\n        return total\r\n    }\r\n\r\n    const GetLevelprogress = () => {\r\n        if(user !== false) { // If using a logged in account, get progress from DB\r\n            Axios.post(GetLevelProgressURL, {\r\n                UserName: user.attributes.sub,\r\n                NickName: currentPlayer.player.NickName,\r\n                SkillName: props.SkillName\r\n            }).then((response) => {\r\n                setProgress(response.data);\r\n            }).catch((error) => {\r\n                setErrorMessage(error)\r\n            })\r\n        }\r\n        else if(user === false) { // If not using an account and not logged in, get progress from local storage\r\n            const localPlayer = getLocalPlayer(currentPlayer.player.NickName)\r\n            const localPlayerProgress = localPlayer.Progress;\r\n            let localProgress = []\r\n\r\n            for(let skillKey in localPlayerProgress) {\r\n                if(localPlayerProgress.hasOwnProperty(skillKey)) {\r\n                    for(let gameKey in localPlayerProgress[skillKey]) {\r\n                        const localLevelsCompleted = parseInt(localPlayerProgress[skillKey][gameKey])\r\n                        localProgress.push({ 'GameName': gameKey, 'LevelsCompleted': localLevelsCompleted })\r\n                    }\r\n                }\r\n            }\r\n\r\n            setProgress(localProgress)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetLevelprogress()\r\n    }, [])\r\n    \r\n    return(\r\n        <LevelNavComponent Levels={levelList} getProgress={getLevelProgress} />\r\n    )\r\n}","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Level-List.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\images\\MixAndMatchImages.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Back-Button.js",["287"],"import React from 'react'\r\nimport './Back-Button.scss'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FiArrowLeftCircle } from 'react-icons/fi'\r\n\r\nexport default function BackButton() {\r\n    let navigate = useNavigate();\r\n    return (\r\n        <div className='d-flex align-self-start'>\r\n            <a id=\"Back-Button\" onClick={() => navigate(-1)}>\r\n                <FiArrowLeftCircle id=\"Back\" size={130} />\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\n","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\images\\ThrowEyesImages.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\images\\CardsGameImages.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\games\\CardsGame.js",["288","289","290","291","292"],"import React, { useEffect, useState } from 'react';\r\nimport { shuffleArray } from '../../components/images/Image-Functions';\r\nimport SimpleBar from 'simplebar-react';\r\nimport { SizeMe } from 'react-sizeme';\r\nimport './CardsGame.scss';\r\n\r\nexport default function CardsGame(props) {\r\n\r\n    const [currentCards, setCurrentCards] = useState([]);\r\n    const [rowWidth, setRowWidth] = useState(null);\r\n    const [contentWidth, setContentWidth] = useState(null);\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    const difficulty = props.difficulty;\r\n    const levels = props.numLevels;\r\n\r\n    useEffect(() => {\r\n        shuffleArray(props.shuffledImages.incorrect);\r\n        ShuffleCards();\r\n    }, [difficulty])\r\n\r\n    const ShuffleCards = () => {\r\n        let dummy = [];\r\n        if(difficulty === 1) {\r\n            dummy = props.shuffledImages.correct;\r\n            dummy = dummy.concat(props.shuffledImages.incorrect.slice(0, 2));\r\n            shuffleArray(dummy);\r\n            setCurrentCards(dummy);\r\n        }\r\n        else if(difficulty === 2) {\r\n            dummy = props.shuffledImages.correct;\r\n            dummy = dummy.concat(props.shuffledImages.incorrect.slice(0, 4));\r\n            shuffleArray(dummy);\r\n            setCurrentCards(dummy);\r\n        }\r\n        else if(difficulty === 3) {\r\n            dummy = props.shuffledImages.correct;\r\n            dummy = dummy.concat(props.shuffledImages.incorrect.slice(0, props.shuffledImages.incorrect.length));\r\n            shuffleArray(dummy);\r\n            setCurrentCards(dummy);\r\n        }\r\n    }\r\n\r\n    const WinCondition = (selection) => {\r\n        props.setFinishTime(new Date().getTime()); // When user clicks an option set the finish time\r\n        \r\n        if(selection === 'true') {\r\n            props.setLevelCompleted('True');\r\n            props.setPopupState(true);\r\n            props.setAttemptNumber(0);\r\n            ShuffleCards();\r\n        }\r\n        else {\r\n            props.setAttemptNumber(props.attemptNumber + 1);\r\n            props.setPopupState(true);\r\n        }\r\n    }\r\n\r\n    function SetRowJustification() { // cards are cut off by the simplebar component when statically defined as centered, this is a solution\r\n        if(contentWidth > rowWidth) {\r\n            return '';\r\n        } else\r\n            return 'justify-content-center';\r\n    }\r\n\r\n    return (\r\n        <div id=\"Card-Game\" className=\"container-fluid\">\r\n            <div className=\"row justify-content-center\">\r\n                <SimpleBar style={{ width: '70vw' }} autoHide={false}>\r\n                    <div className=\"container-fluid\">\r\n                        <SizeMe\r\n                            monitorWidth\r\n                            refreshRate={16}>\r\n                            {({ size }) => \r\n                                <div className={`row ${SetRowJustification()}`}>\r\n                                    {setRowWidth(size.width)}\r\n                                    <SizeMe\r\n                                    monitorWidth\r\n                                    refreshRate={16}>\r\n                                        {({ size }) => \r\n                                            <div className=\"d-flex\">\r\n                                                {setContentWidth(size.width)}\r\n                                                {difficulty <= levels &&\r\n                                                    <>\r\n                                                        {currentCards.map((image, i) => {\r\n                                                            return(\r\n                                                                <div key={i} className=\"d-flex align-items-end card-option mr-2\">\r\n                                                                    <a onClick={() => WinCondition(image.correct)} >\r\n                                                                        <img src={image.default} />\r\n                                                                    </a>\r\n                                                                </div>\r\n                                                            )\r\n                                                        })}\r\n                                                    </>\r\n                                                }\r\n                                            </div>\r\n                                        }\r\n                                    </SizeMe>\r\n                                </div>\r\n                            }\r\n                        </SizeMe>\r\n                    </div>\r\n                </SimpleBar>\r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\games\\Hop-Arms.js",["293","294","295","296","297","298"],"import React, { useEffect, useState } from 'react';\r\nimport { shuffleArray, returnRandomHopArmsCharacters } from '../../components/images/Image-Functions';\r\nimport SimpleBar from 'simplebar-react';\r\nimport { SizeMe } from 'react-sizeme';\r\nimport './CardsGame.scss';\r\nimport './Hop-Arms.scss';\r\n\r\nexport default function HopArms(props) {\r\n    const [currentCards, setCurrentCards] = useState([]);\r\n    const [characters, setCharacters] = useState({\r\n        character1: null,\r\n        character2: null,\r\n        character3: null,\r\n        character4: null,\r\n    });\r\n    const [charactersReady, setCharactersReady] = useState(false);\r\n    const [rowWidth, setRowWidth] = useState(null);\r\n    const [contentWidth, setContentWidth] = useState(null);\r\n\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const randomized = returnRandomHopArmsCharacters(props.shuffledImages);\r\n        setCharacters({\r\n            character1: randomized[0],\r\n            character2: randomized[1],\r\n            character3: randomized[2],\r\n            character4: randomized[3],\r\n        });\r\n        setCharactersReady(true);\r\n    }, []);\r\n\r\n    const difficulty = props.difficulty;\r\n    const levels = props.numLevels;\r\n\r\n    useEffect(() => {\r\n        if(characters.character1 !== null || characters.character2 !== null || characters.character3 !== null || characters.character4 !== null) {\r\n            ShuffleCards();\r\n        }\r\n    }, [difficulty, charactersReady]);\r\n\r\n    const ShuffleCards = () => {\r\n        let dummy = []\r\n        if(difficulty === 1) {\r\n            dummy = characters.character1.correct;\r\n            dummy = dummy.concat(characters.character1.incorrect.slice(0, characters.character1.incorrect.length));\r\n            shuffleArray(dummy);\r\n            setCurrentCards(dummy);\r\n        }\r\n        else if(difficulty === 2) {\r\n            dummy = characters.character2.correct;\r\n            dummy = dummy.concat(characters.character2.incorrect.slice(0, characters.character2.incorrect.length));\r\n            shuffleArray(dummy);\r\n            setCurrentCards(dummy);\r\n        }\r\n        else if(difficulty === 3) {\r\n            dummy = characters.character3.correct;\r\n            dummy = dummy.concat(characters.character3.incorrect.slice(0, characters.character3.incorrect.length));\r\n            shuffleArray(dummy);\r\n            setCurrentCards(dummy);\r\n        }\r\n        else if(difficulty === 4) {\r\n            dummy = characters.character4.correct;\r\n            dummy = dummy.concat(characters.character4.incorrect.slice(0, characters.character4.incorrect.length));\r\n            shuffleArray(dummy);\r\n            setCurrentCards(dummy);\r\n        }\r\n    }\r\n\r\n    const WinCondition = (selection) => {\r\n        props.setFinishTime(new Date().getTime()); // When user clicks an option set the finish time\r\n        \r\n        if(selection === 'true') {\r\n            props.setLevelCompleted('True');\r\n            props.setPopupState(true);\r\n            props.setAttemptNumber(0);\r\n            ShuffleCards();\r\n        }\r\n        else {\r\n            props.setAttemptNumber(props.attemptNumber + 1);\r\n            props.setPopupState(true);\r\n        }\r\n    }\r\n\r\n    function SetRowJustification() { // cards are cut off by the simplebar component when statically defined as centered, this is a solution\r\n        if(contentWidth > rowWidth) {\r\n            return '';\r\n        } else\r\n            return 'justify-content-center';\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row justify-content-center\">\r\n                <SimpleBar style={{ width: '85vw' }} autoHide={false}>\r\n                    <div className=\"container-fluid\">\r\n                        <SizeMe\r\n                        monitorWidth\r\n                        refreshRate={16}>\r\n                            {({ size }) => \r\n                                <div className={`row ${SetRowJustification()}`}>\r\n                                    {setRowWidth(size.width)}\r\n                                    <SizeMe\r\n                                    monitorWidth\r\n                                    refreshRate={16}>\r\n                                        {({ size }) => \r\n                                            <div className=\"d-flex hop-arms-flex\">\r\n                                            {setContentWidth(size.width)}\r\n                                                {difficulty <= levels &&\r\n                                                    <>\r\n                                                        {currentCards.map((image, i) => {\r\n                                                            return(\r\n                                                                <div key={i} className=\"card-option d-flex align-items-end hop-arms-character mr-2\">\r\n                                                                    <a onClick={() => WinCondition(image.correct)} >\r\n                                                                        <img src={image.default} />\r\n                                                                    </a>\r\n                                                                </div>\r\n                                                            )\r\n                                                        })}\r\n                                                    </>\r\n                                                }\r\n                                            </div>\r\n                                        }\r\n                                    </SizeMe>\r\n                                </div>\r\n                            }\r\n                        </SizeMe>\r\n                    </div>\r\n                </SimpleBar>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\games\\Throw-Eyes.js",["299","300","301"],"import React, { useState, useEffect } from 'react'\r\nimport Character from '../../components/throweyes/Character'\r\nimport TargetTemplate from '../../components/throweyes/Target-Template'\r\nimport { returnRandomThrowEyesChar } from '../../components/images/Image-Functions'\r\nimport './Throw-Eyes.scss'\r\nimport 'reactjs-popup/dist/index.css';\r\nimport DeviceOrientation, { Orientation } from 'react-screen-orientation'\r\nimport { MdPhoneAndroid } from 'react-icons/md';\r\n\r\nexport default function ThrowEyes(props) {\r\n    \r\n    const difficulty = props.difficulty\r\n    const levels = props.numLevels\r\n\r\n    const [character, setCharacter] = useState(setChar())\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n    \r\n    const easyTargets = [false,true,false,true,false];\r\n    const mediumTargets = [false,true,true,true,false];\r\n    const hardTargets = [true,true,true,true,true];\r\n\r\n    useEffect(() => {\r\n        setChar()\r\n    }, [difficulty])\r\n\r\n    function setChar() {\r\n        if(difficulty === 1) {\r\n            return returnRandomThrowEyesChar(props.shuffledImages.easy)\r\n        }\r\n        else if (difficulty === 2) {\r\n            return returnRandomThrowEyesChar(props.shuffledImages.medium)\r\n        }\r\n        else if (difficulty === 3) {\r\n            return returnRandomThrowEyesChar(props.shuffledImages.hard)\r\n        }\r\n    }\r\n\r\n    function winCondition(targetID) {\r\n        props.setFinishTime(new Date().getTime()) // When user clicks an option set the finish time\r\n        \r\n        if(targetID === character.id) {\r\n            props.setLevelCompleted('True')\r\n            props.setPopupState(true)\r\n            props.setAttemptNumber(0)\r\n            setCharacter(setChar())\r\n        }\r\n        else {\r\n            setCharacter(setChar())\r\n            props.setAttemptNumber(props.attemptNumber + 1)\r\n            props.setPopupState(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container-fluid\">\r\n                <DeviceOrientation lockOrientation={'landscape'}>\r\n                    <Orientation orientation='landscape' alwaysRender={false}>\r\n                        {difficulty <= levels &&\r\n                            <>\r\n                                <Character image={character.default} />\r\n                                {difficulty === 1 && \r\n                                <>\r\n                                    <TargetTemplate targets={easyTargets} winCondition={winCondition} image={props.shuffledImages.target.default} targetID={character.id} />\r\n                                </>\r\n                                }\r\n                                {difficulty === 2 &&\r\n                                <>\r\n                                    <TargetTemplate targets={mediumTargets} winCondition={winCondition} image={props.shuffledImages.target.default} targetID={character.id} />\r\n                                </>\r\n                                }\r\n                                {difficulty === 3 &&\r\n                                <>\r\n                                    <TargetTemplate targets={hardTargets} winCondition={winCondition} image={props.shuffledImages.target.default} targetID={character.id} />\r\n                                </>\r\n                                }\r\n                            </>\r\n                        }\r\n                    </Orientation>\r\n                    <Orientation orientation='portrait' alwaysRender={false}>\r\n                        <div className=\"container\">\r\n                            <div className=\"row justify-content-center\">\r\n                                Please rotate your device!\r\n                            </div>\r\n                            <div className=\"row justify-content-center\">\r\n                                <MdPhoneAndroid size={80} className=\"rotate-phone-icon\" />\r\n                            </div>\r\n                        </div>\r\n                    </Orientation>\r\n                </DeviceOrientation>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\games\\CardGameZoom.js",["302","303","304","305","306"],"import React, { useEffect, useState } from 'react';\r\nimport { shuffleArray } from '../../components/images/Image-Functions';\r\nimport SimpleBar from 'simplebar-react';\r\nimport { SizeMe } from 'react-sizeme';\r\nimport './CardsGame.scss';\r\n\r\nexport default function CardsGameZoom(props) {\r\n    const [currentCards, setCurrentCards] = useState([]);\r\n    const [rowWidth, setRowWidth] = useState(null);\r\n    const [contentWidth, setContentWidth] = useState(null);\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    const difficulty = props.difficulty;\r\n    const levels = props.numLevels;\r\n\r\n    useEffect(() => {\r\n        if(difficulty <= 3) {\r\n            shuffleArray(props.shuffledImages.Full.incorrect);\r\n        } else\r\n            shuffleArray(props.shuffledImages.Zoom.incorrect);\r\n        ShuffleCards();\r\n    }, [difficulty])\r\n\r\n    const ShuffleCards = () => {\r\n        let dummy = [];\r\n        if(difficulty === 1) {\r\n            dummy = props.shuffledImages.Full.correct;\r\n            dummy = dummy.concat(props.shuffledImages.Full.incorrect.slice(0, 2));\r\n            shuffleArray(dummy);\r\n            setCurrentCards(dummy);\r\n        }\r\n        else if(difficulty === 2) {\r\n            dummy = props.shuffledImages.Full.correct;\r\n            dummy = dummy.concat(props.shuffledImages.Full.incorrect.slice(0, 4));\r\n            shuffleArray(dummy);\r\n            setCurrentCards(dummy);\r\n        }\r\n        else if(difficulty === 3) {\r\n            dummy = props.shuffledImages.Full.correct;\r\n            dummy = dummy.concat(props.shuffledImages.Full.incorrect.slice(0, props.shuffledImages.Full.incorrect.length));\r\n            shuffleArray(dummy);\r\n            setCurrentCards(dummy);\r\n        }\r\n        else if(difficulty === 4) {\r\n            dummy = props.shuffledImages.Zoom.correct;\r\n            dummy = dummy.concat(props.shuffledImages.Zoom.incorrect.slice(0, 2));\r\n            shuffleArray(dummy);\r\n            setCurrentCards(dummy);\r\n        }\r\n        else if(difficulty === 5) {\r\n            dummy = props.shuffledImages.Zoom.correct;\r\n            dummy = dummy.concat(props.shuffledImages.Zoom.incorrect.slice(0, 4));\r\n            shuffleArray(dummy);\r\n            setCurrentCards(dummy);\r\n        }\r\n        else if(difficulty === 6) {\r\n            dummy = props.shuffledImages.Zoom.correct;\r\n            dummy = dummy.concat(props.shuffledImages.Zoom.incorrect.slice(0, props.shuffledImages.Zoom.incorrect.length));\r\n            shuffleArray(dummy);\r\n            setCurrentCards(dummy);\r\n        }\r\n    }\r\n\r\n    const WinCondition = (selection) => {\r\n        props.setFinishTime(new Date().getTime()); // When user clicks an option set the finish time\r\n        \r\n        if(selection === 'true') {\r\n            props.setLevelCompleted('True');\r\n            props.setPopupState(true);\r\n            props.setAttemptNumber(0);\r\n            ShuffleCards();\r\n        }\r\n        else {\r\n            props.setAttemptNumber(props.attemptNumber + 1);\r\n            props.setPopupState(true);\r\n        }\r\n    }\r\n\r\n    function SetRowJustification() { // cards are cut off by the simplebar component when statically defined as centered, this is a solution\r\n        if(contentWidth > rowWidth) {\r\n            return '';\r\n        } else\r\n            return 'justify-content-center';\r\n    }\r\n\r\n    return (\r\n        <div id='Card-Game' className=\"container-fluid\">\r\n            <div className=\"row justify-content-center\">\r\n                <SimpleBar style={{ width: '70vw' }} autoHide={false}>\r\n                    <div className=\"container-fluid\">\r\n                        <SizeMe\r\n                            monitorWidth\r\n                            refreshRate={16}>\r\n                            {({ size }) => \r\n                                <div className={`row ${SetRowJustification()}`}>\r\n                                    {setRowWidth(size.width)}\r\n                                    <SizeMe\r\n                                    monitorWidth\r\n                                    refreshRate={16}>\r\n                                        {({ size }) => \r\n                                            <div className=\"d-flex\">\r\n                                                {setContentWidth(size.width)}\r\n                                                {difficulty <= levels &&\r\n                                                    <>\r\n                                                        {currentCards.map((image, i) => {\r\n                                                            return(\r\n                                                                <div key={i} className=\"d-flex align-items-end card-option mr-2\">\r\n                                                                    <a onClick={() => WinCondition(image.correct)} >\r\n                                                                        <img src={image.default} />\r\n                                                                    </a>\r\n                                                                </div>\r\n                                                            )\r\n                                                        })}\r\n                                                    </>\r\n                                                }\r\n                                            </div>\r\n                                            }\r\n                                    </SizeMe>\r\n                                </div>\r\n                            }\r\n                        </SizeMe>\r\n                    </div>\r\n                </SimpleBar>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\pages\\games\\MixAndMatch.js",["307","308","309","310","311","312","313","314","315","316","317","318"],"import React, { useState, useEffect } from \"react\"\r\nimport { shuffleArray } from '../../components/images/Image-Functions'\r\nimport SimpleBar from 'simplebar-react';\r\nimport './MixAndMatch.scss'\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport { FaHandPointUp } from 'react-icons/fa';\r\nimport { SizeMe } from 'react-sizeme';\r\nimport '../../components/Hand-Drag-Animation.scss'\r\n\r\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y } from 'swiper';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport 'swiper/swiper.scss';\r\nimport 'swiper/components/navigation/navigation.scss';\r\nimport 'swiper/components/pagination/pagination.scss';\r\nimport 'swiper/components/scrollbar/scrollbar.scss';\r\n\r\n// install Swiper modules\r\nSwiperCore.use([Navigation, Pagination, Scrollbar, A11y]);\r\n\r\n//Known issue with Mix and Match, problem with drag and drop component when you drag the correct right card and then the correct left card if using {difficulty === 1 && } logic, find fix later\r\nexport default function MixAndMatch(props) {\r\n\r\n    const difficulty = props.difficulty\r\n    const levels = props.numLevels;\r\n\r\n    const [panel1, setPanel1] = useState(null)\r\n    const [panel2, setPanel2] = useState(null)\r\n    const [panel3, setPanel3] = useState(null)\r\n    const [showHand, setShowHand] = useState(false);\r\n    const [rowWidth, setRowWidth] = useState(null);\r\n    const [contentWidth, setContentWidth] = useState(null);\r\n\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    useEffect(() => {\r\n      if(props.popupState === false && props.attemptNumber === 0 && difficulty > 1) {\r\n        setShowHand(true)\r\n        setTimeout(() => setShowHand(false), 4000)\r\n      }\r\n    }, [props.popupState])\r\n\r\n    console.log(props.attemptNumber)\r\n\r\n    function randomizeImages() {\r\n      if(difficulty === 1) {\r\n        props.shuffledImages.easy = shuffleArray(props.shuffledImages.easy)\r\n      }\r\n      if(difficulty === 2) {\r\n        props.shuffledImages.medium.Panel1 = shuffleArray(props.shuffledImages.medium.Panel1)\r\n        props.shuffledImages.medium.Panel2 = shuffleArray(props.shuffledImages.medium.Panel2)\r\n      }\r\n      if(difficulty === 3) {\r\n        props.shuffledImages.hard.Panel1 = shuffleArray(props.shuffledImages.hard.Panel1)\r\n        props.shuffledImages.hard.Panel2 = shuffleArray(props.shuffledImages.hard.Panel2)\r\n        props.shuffledImages.hard.Panel3 = shuffleArray(props.shuffledImages.hard.Panel3)\r\n      }\r\n    }\r\n\r\n    function winCondition(selection) {\r\n      \r\n      if(difficulty === 1) {\r\n        props.setFinishTime(new Date().getTime()) // When user clicks an option set the finish time\r\n          if(selection === 'true') {\r\n            props.setLevelCompleted('True')\r\n            props.setPopupState(true)\r\n            props.setAttemptNumber(0)\r\n            randomizeImages()\r\n        }\r\n        else if(selection === 'false') {\r\n          props.setAttemptNumber(props.attemptNumber + 1)\r\n          props.setPopupState(true)\r\n        }\r\n      }\r\n\r\n      else {\r\n        if(difficulty === 2) {\r\n          props.setFinishTime(new Date().getTime()) // When user clicks an option set the finish time\r\n          if(panel1 === 'true' && panel2 === 'true') {\r\n            props.setLevelCompleted('True')\r\n            props.setPopupState(true)\r\n            props.setAttemptNumber(0)\r\n          } \r\n          else if( (panel1 === 'false' || panel2 === 'false') ) {\r\n            props.setAttemptNumber(props.attemptNumber + 1)\r\n            props.setPopupState(true)\r\n          }\r\n        }\r\n        if(difficulty === 3) {\r\n          props.setFinishTime(new Date().getTime()) // When user clicks an option set the finish time\r\n          if(panel1 === 'true' && panel2 === 'true' && panel3 === 'true') {\r\n            props.setLevelCompleted('True')\r\n            props.setPopupState(true)\r\n            props.setAttemptNumber(0)\r\n          } \r\n          else if(panel1 === 'false' || panel2 === 'false' || panel3 === 'false') {\r\n            props.setAttemptNumber(props.attemptNumber + 1)\r\n            props.setPopupState(true)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    function SetRowJustification() { // cards are cut off by the simplebar component when statically defined as centered, this is a solution\r\n        if(contentWidth > rowWidth) {\r\n            return '';\r\n        } else\r\n            return 'justify-content-center';\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {difficulty <= levels &&\r\n        <>\r\n          {difficulty === 1 &&\r\n            <div id='Card-Game' className=\"container-fluid\">\r\n              <div className=\"row justify-content-center\">\r\n                <SimpleBar style={{ width: '70vw' }} autoHide={false}>\r\n                  <div className=\"container-fluid\">\r\n                    <SizeMe\r\n                      monitorWidth\r\n                      refreshRate={16}>\r\n                      {({ size }) => \r\n                        <div className={`row ${SetRowJustification()}`}>\r\n                          {setRowWidth(size.width)}\r\n                          <SizeMe\r\n                          monitorWidth\r\n                          refreshRate={16}>\r\n                              {({ size }) => \r\n                                <div className=\"d-flex\">\r\n                                  {setContentWidth(size.width)}\r\n                                  {props.shuffledImages.easy.map((image, i) => {\r\n                                      return(\r\n                                        <div key={i} className=\"d-flex align-items-end card-option mr-2\">\r\n                                            <a onClick={() => winCondition(image.correct)} >\r\n                                                <img src={image.default} />\r\n                                            </a>\r\n                                        </div>\r\n                                      )\r\n                                  })}\r\n                                </div>\r\n                              }\r\n                          </SizeMe>\r\n                        </div>\r\n                        }\r\n                    </SizeMe>\r\n                  </div>\r\n                </SimpleBar>\r\n              </div>\r\n            </div>\r\n          }\r\n          {difficulty > 1 &&\r\n          <div className=\"container\">\r\n            {props.vertical ? \r\n            <>\r\n              {showHand === true && <FaHandPointUp size={80} className=\"horizontal-drag-hand\" />}\r\n                {difficulty === 2 &&\r\n                  <>\r\n  \r\n                    <div className= \"row justify-content-center match vertical-match mt-5\">\r\n\r\n                        <Swiper\r\n                          loop={true}\r\n                          navigation= {{ nextEl: \".swiper-button-next\", prevEl: \".swiper-button-prev\" }}\r\n                          onSwiper={(s) => { // Initialize active panel as current panel on page load\r\n                            setPanel1(props.shuffledImages.medium.Panel1[s.realIndex].correct);\r\n                          }}\r\n                          onSlideChange={(s) => { // update active panel as user swipes\r\n                            setPanel1(props.shuffledImages.medium.Panel1[s.realIndex].correct);\r\n                          }}\r\n                        >\r\n                            {props.shuffledImages.medium.Panel1.map((image, i) => (\r\n                              <SwiperSlide key={'Panel1' + i}>    \r\n                                <div className=\"d-flex justify-content-center\">\r\n                                  <img src={image.default} />\r\n                               </div>\r\n                              </SwiperSlide>\r\n                            ))}\r\n                        </Swiper>\r\n                      \r\n                    </div>\r\n\r\n                    <div className= \"row justify-content-center match vertical-match\">\r\n                      \r\n                      <Swiper\r\n                        loop={true}\r\n                        navigation= {{ nextEl: \".swiper-button-next\", prevEl: \".swiper-button-prev\" }}\r\n                        onSwiper={(s) => { // Initialize active panel as current panel on page load\r\n                          setPanel2(props.shuffledImages.medium.Panel2[s.realIndex].correct);\r\n                        }}\r\n                        onSlideChange={(s) => { // update active panel as user swipes\r\n                          setPanel2(props.shuffledImages.medium.Panel2[s.realIndex].correct);\r\n                        }}\r\n                      >\r\n                        {props.shuffledImages.medium.Panel2.map((image, i) => (\r\n                          <SwiperSlide key={'Panel2' + i}> \r\n                            <div className=\"d-flex justify-content-center\">\r\n                              <img src={image.default} />\r\n                            </div>\r\n                          </SwiperSlide>\r\n                        ))}\r\n                      </Swiper>\r\n                      \r\n                    </div>\r\n  \r\n                    <div className= \"row justify-content-center mt-1\">\r\n                      <button className=\"button btn-secondary\" onClick={() => winCondition()}>Confirm!</button>\r\n                    </div>\r\n                  </>\r\n                  }\r\n\r\n                  {difficulty === 3 &&\r\n                    <>\r\n  \r\n                      <div className= \"row justify-content-center match vertical-match mt-5\">\r\n\r\n                          <Swiper\r\n                            loop={true}\r\n                            navigation= {{ nextEl: \".swiper-button-next\", prevEl: \".swiper-button-prev\" }}\r\n                            onSwiper={(s) => { // Initialize active panel as current panel on page load\r\n                              setPanel1(props.shuffledImages.hard.Panel1[s.realIndex].correct);\r\n                            }}\r\n                            onSlideChange={(s) => { // update active panel as user swipes\r\n                              setPanel1(props.shuffledImages.hard.Panel1[s.realIndex].correct);\r\n                            }}\r\n                          >\r\n                              {props.shuffledImages.hard.Panel1.map((image, i) => (\r\n                                <SwiperSlide key={'Panel1' + i}>    \r\n                                  <div className=\"d-flex justify-content-center\">\r\n                                    <img src={image.default} />\r\n                                </div>\r\n                                </SwiperSlide>\r\n                              ))}\r\n                          </Swiper>\r\n                        \r\n                      </div>\r\n\r\n                      <div className= \"row justify-content-center match vertical-match\">\r\n                        \r\n                        <Swiper\r\n                          loop={true}\r\n                          navigation= {{ nextEl: \".swiper-button-next\", prevEl: \".swiper-button-prev\" }}\r\n                          onSwiper={(s) => { // Initialize active panel as current panel on page load\r\n                            setPanel2(props.shuffledImages.hard.Panel2[s.realIndex].correct);\r\n                          }}\r\n                          onSlideChange={(s) => { // update active panel as user swipes\r\n                            setPanel2(props.shuffledImages.hard.Panel2[s.realIndex].correct);\r\n                          }}\r\n                        >\r\n                          {props.shuffledImages.hard.Panel2.map((image, i) => (\r\n                            <SwiperSlide key={'Panel2' + i}> \r\n                              <div className=\"d-flex justify-content-center\">\r\n                                <img src={image.default} />\r\n                              </div>\r\n                            </SwiperSlide>\r\n                          ))}\r\n                        </Swiper>\r\n                        \r\n                      </div>\r\n\r\n                      <div className= \"row justify-content-center match vertical-match\">\r\n                        \r\n                        <Swiper\r\n                          loop={true}\r\n                          navigation= {{ nextEl: \".swiper-button-next\", prevEl: \".swiper-button-prev\" }}\r\n                          onSwiper={(s) => { // Initialize active panel as current panel on page load\r\n                            setPanel3(props.shuffledImages.hard.Panel3[s.realIndex].correct);\r\n                          }}\r\n                          onSlideChange={(s) => { // update active panel as user swipes\r\n                            setPanel3(props.shuffledImages.hard.Panel3[s.realIndex].correct);\r\n                          }}\r\n                        >\r\n                          {props.shuffledImages.hard.Panel3.map((image, i) => (\r\n                            <SwiperSlide key={'Panel3' + i}> \r\n                              <div className=\"d-flex justify-content-center\">\r\n                                <img src={image.default} />\r\n                              </div>\r\n                            </SwiperSlide>\r\n                          ))}\r\n                        </Swiper>\r\n                        \r\n                      </div>\r\n    \r\n                      <div className= \"row justify-content-center mt-1\">\r\n                        <button className=\"button btn-secondary\" onClick={() => winCondition()}>Confirm!</button>\r\n                      </div>\r\n                    </>\r\n                  }\r\n                </>\r\n                :\r\n                <>\r\n                {showHand === true && <FaHandPointUp size={80} className=\"vertical-drag-hand\" />}\r\n                <div className=\"row justify-content-center mt-5\">\r\n\r\n                  <div className= \"row horizontal-match match mt-5\">\r\n\r\n                    <Swiper\r\n                      slidesPerView={1}\r\n                      loop={true}\r\n                      direction='vertical'\r\n                      onSwiper={(s) => { // Initialize active panel as current panel on page load\r\n                        setPanel1(props.shuffledImages.medium.Panel1[s.realIndex].correct);\r\n                      }}\r\n                      onSlideChange={(s) => {\r\n                        setPanel1(props.shuffledImages.medium.Panel1[s.realIndex].correct);\r\n                      }}\r\n                    >\r\n                        {props.shuffledImages.medium.Panel1.map((image, i) => (\r\n                          <SwiperSlide key={i}> \r\n                            <img src={image.default} />\r\n                          </SwiperSlide>\r\n                        ))}\r\n                    </Swiper>\r\n                    \r\n                    <Swiper\r\n                      slidesPerView={1}\r\n                      loop={true}\r\n                      direction='vertical'\r\n                      onSwiper={(s) => { // Initialize active panel as current panel on page load\r\n                        setPanel2(props.shuffledImages.medium.Panel2[s.realIndex].correct);\r\n                      }}\r\n                      onSlideChange={(s) => {\r\n                        setPanel2(props.shuffledImages.medium.Panel2[s.realIndex].correct);\r\n                      }}\r\n                    >\r\n                      {props.shuffledImages.medium.Panel2.map((image,i) => (\r\n                        <SwiperSlide key={i}> \r\n                          <img src={image.default} />\r\n                        </SwiperSlide>\r\n                      ))}\r\n                    </Swiper>\r\n                    \r\n                  </div>\r\n\r\n                </div>\r\n\r\n                <div className= \"row justify-content-center mt-1\">\r\n                  <button className=\"button btn-secondary\" onClick={() => winCondition()}>Confirm!</button>\r\n                </div>\r\n                </>\r\n            }\r\n          </div>\r\n          }\r\n          </>\r\n        }\r\n      </>\r\n    )\r\n}\r\n","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\LevelNavbar.js",["319","320"],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\LevelNavComponent.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Game-Popup.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\images\\Monster-Images.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\images\\Image-Functions.js",["321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338"],"\r\nfunction assignMaMValues(keys, array) {\r\n    for (let i = 0; i < array.length; i++) {\r\n        array[i] = splitMaMString(keys[i], array[i]);\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction splitMaMString(string, object) {\r\n    string = string.split(\".\");\r\n    string = string[0].split(\"_\");\r\n\r\n    const level = string[2].substr(string[2].length - 1, string[2].length)\r\n    object.difficulty = parseInt(level)\r\n\r\n    if(level == 1) {\r\n        if(string[3].substr(0, string[3].length - 1) === 'Correct') {\r\n            object.correct = 'true';\r\n        } else \r\n            object.correct = 'false';\r\n    } \r\n    else if (level > 1) {\r\n        if(string[3] === 'panel1') {\r\n            object.position = 'Panel1';\r\n        } else if(string[3] === 'panel2') {\r\n            object.position = 'Panel2';\r\n        } else if(string[3] === 'panel3') {\r\n            object.position = 'Panel3';\r\n        }\r\n        if(string[4].substr(0, string[4].length - 1) === 'Correct') {\r\n            object.correct = 'true';\r\n        } else {\r\n            object.correct = 'false';\r\n        }\r\n    }\r\n\r\n    return object;\r\n}\r\n\r\nfunction assignCardsValues(keys, array) {\r\n    for (let i = 0; i < array.length; i++) {\r\n        splitCardsString(keys[i], array[i]);\r\n    }\r\n    \r\n    return array;\r\n}\r\n\r\nfunction splitCardsString(string, object) {\r\n    string = string.split(\".\");\r\n    string = string[0].split(\"_\");\r\n    if(string[3] === 'Zoom' || string[3] === 'Full') {\r\n        object.zoom = string[3]\r\n    } \r\n    if(string[2].substr(0, string[2].length - 1) == 'Correct') {\r\n        object.correct = 'true';\r\n    } else {\r\n        object.correct = 'false';\r\n    }\r\n}\r\n\r\nfunction assignThrowEyesValues(array) {\r\n    for (let i = 0; i < array.length; i++) {\r\n        splitThrowEyesString(array[i].default, array[i]);\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction splitThrowEyesString(string, object) {\r\n    string = string.split(\"/\");\r\n    string = string[3].split(\".\");\r\n    string = string[0].split(\"_\");\r\n\r\n    if(string.length < 4) {\r\n        object.type = 'Target';\r\n    } else {\r\n        object.type = 'Character';\r\n        object.eyePosition = string[3];\r\n        object.id = eyePosition(string[3]);\r\n    }\r\n}\r\n\r\nfunction eyePosition(position) {\r\n    switch(position) {\r\n        case 'FarLeft':\r\n            return 1;\r\n        case 'Left':\r\n            return 2;\r\n        case 'Center':\r\n            return 3;\r\n        case 'Right':\r\n            return 4;\r\n        case 'FarRight':\r\n            return 5;\r\n    }\r\n}\r\n\r\nfunction sortThrowEyesImages(array) {\r\n    let sortedArray = [];\r\n    let easyArray = [];\r\n    let mediumArray = [];\r\n    let hardArray = [];\r\n\r\n    let easy = 0;\r\n    let medium = 0;\r\n    let hard = 0;\r\n\r\n    for(let i = 0; i < array.length; i++) {\r\n        if(array[i].type == 'Character') {\r\n            if (array[i].eyePosition == 'Left' || array[i].eyePosition == 'Right') \r\n                easyArray[easy++] = array[i];\r\n            if (array[i].eyePosition == 'Left' || array[i].eyePosition == 'Right' || array[i].eyePosition == 'Center') \r\n                mediumArray[medium++] = array[i];\r\n            hardArray[hard++] = array[i];\r\n        } else {\r\n            sortedArray.target = array[i];\r\n        }\r\n    }\r\n\r\n    sortedArray.easy = easyArray;\r\n    sortedArray.medium = mediumArray;\r\n    sortedArray.hard = hardArray;\r\n\r\n    return sortedArray;\r\n}\r\n\r\n\r\nfunction shuffleArray(array) {\r\n    let i = array.length - 1;\r\n    for (; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        const temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction returnRandomThrowEyesChar(array) {\r\n    shuffleArray(array);\r\n    return array[0];\r\n}\r\n\r\nfunction sortMaMImages(array) {\r\n    let sortedArray = [];\r\n    let difficulty1Array = [];\r\n    let difficulty2Array = [];\r\n    let difficulty3Array = [];\r\n\r\n    let panel1Array = new Array(2);\r\n    let panel2Array = new Array(2);\r\n    let panel3Array = new Array(2);\r\n\r\n    for(let i = 0; i < 2; i++) {\r\n        panel1Array[i] = new Array(0);\r\n        panel2Array[i] = new Array(0);\r\n        panel3Array[i] = new Array(0);\r\n    }\r\n    \r\n    let difficulty1Count = 0;\r\n\r\n    for(let i = 0; i < array.length; i++) {\r\n        const difficulty = array[i].difficulty\r\n        if(difficulty === 1) {\r\n            difficulty1Array[difficulty1Count] = array[i];\r\n            difficulty1Count++;\r\n        }\r\n        if(difficulty === 2) {\r\n            if(array[i].position == 'Panel1') {\r\n                panel1Array[0].push(array[i]);\r\n            } else if(array[i].position == 'Panel2') {\r\n                panel2Array[0].push(array[i]);\r\n            }\r\n        }\r\n        if(difficulty === 3) {\r\n            if(array[i].position == 'Panel1') {\r\n                panel1Array[1].push(array[i]);\r\n            } else if(array[i].position == 'Panel2') {\r\n                panel2Array[1].push(array[i]);\r\n            } else if(array[i].position == 'Panel3') {\r\n                panel3Array[1].push(array[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    difficulty2Array.Panel1 = panel1Array[0];\r\n    difficulty2Array.Panel2 = panel2Array[0];\r\n\r\n    difficulty3Array.Panel1 = panel1Array[1];\r\n    difficulty3Array.Panel2 = panel2Array[1];\r\n    difficulty3Array.Panel3 = panel3Array[1];\r\n\r\n    sortedArray.easy = difficulty1Array;\r\n    sortedArray.medium = difficulty2Array;\r\n    sortedArray.hard = difficulty3Array;\r\n\r\n    return sortedArray;\r\n}\r\n\r\n\r\nfunction sortCardsArray(array) {\r\n    let sortedArray = [];\r\n    let correctArray = []; //correct and incorrect refer to the card options\r\n    let incorrectArray = [];\r\n    \r\n    let correct = 0;\r\n    let incorrect = 0;\r\n\r\n    for(let i = 0; i < array.length; i++) {\r\n        if(array[i].correct == 'true') {\r\n            correctArray[correct] = array[i];\r\n            correct++;\r\n        } else {\r\n            incorrectArray[incorrect] = array[i];\r\n            incorrect++;\r\n        }\r\n    }\r\n\r\n    sortedArray.correct = correctArray;\r\n    sortedArray.incorrect = incorrectArray;\r\n\r\n    return sortedArray;\r\n}\r\n\r\nfunction sortCardsArrayWithZoom(array) {\r\n    let sortedArray = [];\r\n\r\n    sortedArray.Full = [];\r\n    sortedArray.Full.correct = [];\r\n    sortedArray.Full.incorrect = [];\r\n    \r\n    sortedArray.Zoom = [];\r\n    sortedArray.Zoom.correct = [];\r\n    sortedArray.Zoom.incorrect = [];\r\n\r\n    for(let i = 0; i < array.length; i++) {\r\n        if(array[i].correct == 'true') {\r\n            sortedArray[array[i].zoom].correct.push(array[i]);\r\n        } else {\r\n            sortedArray[array[i].zoom].incorrect.push(array[i]);\r\n        }\r\n    }\r\n\r\n    return sortedArray;\r\n}\r\n\r\nfunction assignHopArmsValues(keys, array) {\r\n    for (let i = 0; i < array.length; i++) {\r\n        splitHopArmsString(keys[i], array[i]);\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction returnRandomHopArmsCharacters(array) {\r\n    let randomizedArray = [];\r\n    let keys = Object.keys(array)\r\n\r\n    console.log(keys.length)\r\n\r\n    while(keys.length !== 0) {\r\n        shuffleArray(keys);\r\n        randomizedArray.push(array[keys.pop()]);\r\n    }\r\n\r\n    console.log(randomizedArray)\r\n\r\n    return randomizedArray;\r\n}\r\n\r\nfunction splitHopArmsString(string, object) {\r\n    string = string.split(\".\");\r\n    string = string[0].split(\"_\");\r\n\r\n    object.character = string[3]\r\n\r\n    if(string[2].substr(0, string[2].length - 1) == 'correct') {\r\n        object.correct = 'true';\r\n    } else {\r\n        object.correct = 'false';\r\n    }\r\n}\r\n\r\nfunction sortHopArmsArray(array) {\r\n    let sortedArray = [];\r\n\r\n    sortedArray.orbi = {};\r\n    sortedArray.orbi.correct = [];\r\n    sortedArray.orbi.incorrect = [];\r\n    \r\n    sortedArray.pod = {};\r\n    sortedArray.pod.correct = [];\r\n    sortedArray.pod.incorrect = [];\r\n    \r\n    sortedArray.puff = {};\r\n    sortedArray.puff.correct = [];\r\n    sortedArray.puff.incorrect = [];\r\n    \r\n    sortedArray.spike = {};\r\n    sortedArray.spike.correct = [];\r\n    sortedArray.spike.incorrect = [];\r\n\r\n    for(let i = 0; i < array.length; i++) {\r\n        if(array[i].correct == 'true') {\r\n            sortedArray[array[i].character].correct.push(array[i]);\r\n        } else {\r\n            sortedArray[array[i].character].incorrect.push(array[i]);\r\n        }\r\n    }\r\n\r\n    return sortedArray;\r\n}\r\n\r\nexport {\r\n    assignMaMValues,\r\n    assignCardsValues,\r\n    sortCardsArray,\r\n    sortHopArmsArray,\r\n    sortCardsArrayWithZoom,\r\n    shuffleArray,\r\n    sortMaMImages,\r\n    assignThrowEyesValues,\r\n    assignHopArmsValues,\r\n    sortThrowEyesImages,\r\n    returnRandomThrowEyesChar,\r\n    returnRandomHopArmsCharacters\r\n}\r\n","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\throweyes\\Character.js",["339","340"],"import React from 'react'\r\nimport './Character.scss'\r\n\r\nexport default class Character extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"row justify-content-center\">\r\n                <img src={this.props.image} id=\"Throw-Eyes-Character\" />\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\throweyes\\Target-Template.js",["341","342"],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\throweyes\\Target.js",["343"],"import React from 'react'\r\nimport './Target.scss'\r\n\r\n\r\nexport default class Target extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <img src={this.props.image} class=\"Throw-Eyes-Target\" targetID={this.props.targetID} />\r\n        )\r\n    }\r\n}","C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\aws-exports.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Rewards-List.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Player-Progress-Functions.js",[],"C:\\Users\\xwitw\\Documents\\GitHub\\321-project\\src\\components\\Level-Select-Template.js",["344","345"],{"ruleId":"346","replacedBy":"347"},{"ruleId":"348","replacedBy":"349"},{"ruleId":"350","severity":1,"message":"351","line":81,"column":8,"nodeType":"352","endLine":81,"endColumn":10,"suggestions":"353"},{"ruleId":"350","severity":1,"message":"351","line":97,"column":8,"nodeType":"352","endLine":97,"endColumn":26,"suggestions":"354"},{"ruleId":"355","severity":1,"message":"356","line":108,"column":31,"nodeType":"357","messageId":"358","endLine":108,"endColumn":35},{"ruleId":"359","severity":1,"message":"360","line":142,"column":21,"nodeType":"361","endLine":142,"endColumn":109},{"ruleId":"359","severity":1,"message":"360","line":183,"column":81,"nodeType":"361","endLine":183,"endColumn":132},{"ruleId":"362","severity":1,"message":"363","line":184,"column":85,"nodeType":"361","endLine":184,"endColumn":208},{"ruleId":"359","severity":1,"message":"360","line":191,"column":73,"nodeType":"361","endLine":191,"endColumn":103},{"ruleId":"364","severity":1,"message":"365","line":27,"column":12,"nodeType":"366","messageId":"367","endLine":27,"endColumn":24},{"ruleId":"350","severity":1,"message":"368","line":31,"column":8,"nodeType":"352","endLine":31,"endColumn":10,"suggestions":"369"},{"ruleId":"370","severity":1,"message":"371","line":36,"column":32,"nodeType":"372","messageId":"373","endLine":36,"endColumn":34},{"ruleId":"374","severity":1,"message":"375","line":70,"column":57,"nodeType":"361","endLine":70,"endColumn":87},{"ruleId":"374","severity":1,"message":"375","line":80,"column":53,"nodeType":"361","endLine":80,"endColumn":83},{"ruleId":"364","severity":1,"message":"376","line":2,"column":22,"nodeType":"366","messageId":"367","endLine":2,"endColumn":39},{"ruleId":"364","severity":1,"message":"377","line":32,"column":12,"nodeType":"366","messageId":"367","endLine":32,"endColumn":34},{"ruleId":"364","severity":1,"message":"378","line":33,"column":37,"nodeType":"366","messageId":"367","endLine":33,"endColumn":63},{"ruleId":"350","severity":1,"message":"379","line":64,"column":8,"nodeType":"352","endLine":64,"endColumn":25,"suggestions":"380"},{"ruleId":"381","severity":1,"message":"382","line":67,"column":9,"nodeType":"383","messageId":"384","endLine":80,"endColumn":10},{"ruleId":"385","severity":1,"message":"386","line":87,"column":27,"nodeType":"387","messageId":"388","endLine":87,"endColumn":29},{"ruleId":"350","severity":1,"message":"389","line":89,"column":8,"nodeType":"352","endLine":89,"endColumn":25,"suggestions":"390"},{"ruleId":"350","severity":1,"message":"391","line":93,"column":24,"nodeType":"357","endLine":93,"endColumn":28},{"ruleId":"350","severity":1,"message":"392","line":121,"column":8,"nodeType":"352","endLine":121,"endColumn":28,"suggestions":"393"},{"ruleId":"350","severity":1,"message":"394","line":132,"column":8,"nodeType":"352","endLine":132,"endColumn":64,"suggestions":"395"},{"ruleId":"359","severity":1,"message":"360","line":161,"column":49,"nodeType":"361","endLine":161,"endColumn":52},{"ruleId":"364","severity":1,"message":"377","line":34,"column":12,"nodeType":"366","messageId":"367","endLine":34,"endColumn":34},{"ruleId":"364","severity":1,"message":"396","line":36,"column":12,"nodeType":"366","messageId":"367","endLine":36,"endColumn":25},{"ruleId":"364","severity":1,"message":"397","line":36,"column":27,"nodeType":"366","messageId":"367","endLine":36,"endColumn":43},{"ruleId":"350","severity":1,"message":"391","line":46,"column":24,"nodeType":"357","endLine":46,"endColumn":28},{"ruleId":"350","severity":1,"message":"398","line":60,"column":8,"nodeType":"352","endLine":60,"endColumn":25,"suggestions":"399"},{"ruleId":"381","severity":1,"message":"382","line":63,"column":9,"nodeType":"383","messageId":"384","endLine":76,"endColumn":10},{"ruleId":"385","severity":1,"message":"386","line":83,"column":32,"nodeType":"387","messageId":"388","endLine":83,"endColumn":34},{"ruleId":"350","severity":1,"message":"400","line":85,"column":8,"nodeType":"352","endLine":85,"endColumn":30,"suggestions":"401"},{"ruleId":"350","severity":1,"message":"394","line":131,"column":8,"nodeType":"352","endLine":131,"endColumn":82,"suggestions":"402"},{"ruleId":"359","severity":1,"message":"360","line":160,"column":45,"nodeType":"361","endLine":160,"endColumn":48},{"ruleId":"359","severity":1,"message":"360","line":182,"column":45,"nodeType":"361","endLine":182,"endColumn":101},{"ruleId":"359","severity":1,"message":"360","line":183,"column":49,"nodeType":"361","endLine":183,"endColumn":52},{"ruleId":"359","severity":1,"message":"360","line":202,"column":41,"nodeType":"361","endLine":202,"endColumn":104},{"ruleId":"359","severity":1,"message":"360","line":203,"column":45,"nodeType":"361","endLine":203,"endColumn":48},{"ruleId":"364","severity":1,"message":"403","line":3,"column":40,"nodeType":"366","messageId":"367","endLine":3,"endColumn":52},{"ruleId":"364","severity":1,"message":"404","line":3,"column":62,"nodeType":"366","messageId":"367","endLine":3,"endColumn":76},{"ruleId":"364","severity":1,"message":"405","line":5,"column":10,"nodeType":"366","messageId":"367","endLine":5,"endColumn":14},{"ruleId":"359","severity":1,"message":"360","line":40,"column":15,"nodeType":"361","endLine":40,"endColumn":57},{"ruleId":"359","severity":1,"message":"360","line":47,"column":19,"nodeType":"361","endLine":47,"endColumn":50},{"ruleId":"359","severity":1,"message":"360","line":52,"column":19,"nodeType":"361","endLine":52,"endColumn":45},{"ruleId":"359","severity":1,"message":"360","line":60,"column":15,"nodeType":"361","endLine":60,"endColumn":57},{"ruleId":"359","severity":1,"message":"360","line":11,"column":13,"nodeType":"361","endLine":11,"endColumn":63},{"ruleId":"359","severity":1,"message":"360","line":15,"column":33,"nodeType":"361","endLine":15,"endColumn":79},{"ruleId":"362","severity":1,"message":"363","line":16,"column":37,"nodeType":"361","endLine":16,"endColumn":114},{"ruleId":"381","severity":1,"message":"382","line":9,"column":5,"nodeType":"383","messageId":"384","endLine":34,"endColumn":6},{"ruleId":"385","severity":1,"message":"386","line":64,"column":19,"nodeType":"387","messageId":"388","endLine":64,"endColumn":21},{"ruleId":"385","severity":1,"message":"386","line":7,"column":21,"nodeType":"387","messageId":"388","endLine":7,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":7,"column":55,"nodeType":"387","messageId":"388","endLine":7,"endColumn":57},{"ruleId":"385","severity":1,"message":"386","line":7,"column":91,"nodeType":"387","messageId":"388","endLine":7,"endColumn":93},{"ruleId":"385","severity":1,"message":"386","line":7,"column":126,"nodeType":"387","messageId":"388","endLine":7,"endColumn":128},{"ruleId":"385","severity":1,"message":"386","line":13,"column":21,"nodeType":"387","messageId":"388","endLine":13,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":13,"column":55,"nodeType":"387","messageId":"388","endLine":13,"endColumn":57},{"ruleId":"385","severity":1,"message":"386","line":13,"column":99,"nodeType":"387","messageId":"388","endLine":13,"endColumn":101},{"ruleId":"385","severity":1,"message":"386","line":13,"column":134,"nodeType":"387","messageId":"388","endLine":13,"endColumn":136},{"ruleId":"385","severity":1,"message":"386","line":19,"column":21,"nodeType":"387","messageId":"388","endLine":19,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":24,"column":21,"nodeType":"387","messageId":"388","endLine":24,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":24,"column":53,"nodeType":"387","messageId":"388","endLine":24,"endColumn":55},{"ruleId":"385","severity":1,"message":"386","line":24,"column":95,"nodeType":"387","messageId":"388","endLine":24,"endColumn":97},{"ruleId":"364","severity":1,"message":"365","line":18,"column":12,"nodeType":"366","messageId":"367","endLine":18,"endColumn":24},{"ruleId":"350","severity":1,"message":"368","line":22,"column":8,"nodeType":"352","endLine":22,"endColumn":10,"suggestions":"406"},{"ruleId":"364","severity":1,"message":"365","line":17,"column":12,"nodeType":"366","messageId":"367","endLine":17,"endColumn":24},{"ruleId":"350","severity":1,"message":"407","line":68,"column":8,"nodeType":"352","endLine":68,"endColumn":20,"suggestions":"408"},{"ruleId":"350","severity":1,"message":"409","line":81,"column":8,"nodeType":"352","endLine":81,"endColumn":19,"suggestions":"410"},{"ruleId":"364","severity":1,"message":"365","line":15,"column":12,"nodeType":"366","messageId":"367","endLine":15,"endColumn":24},{"ruleId":"350","severity":1,"message":"411","line":59,"column":8,"nodeType":"352","endLine":59,"endColumn":10,"suggestions":"412"},{"ruleId":"359","severity":1,"message":"360","line":10,"column":13,"nodeType":"361","endLine":10,"endColumn":62},{"ruleId":"364","severity":1,"message":"365","line":12,"column":12,"nodeType":"366","messageId":"367","endLine":12,"endColumn":24},{"ruleId":"364","severity":1,"message":"413","line":12,"column":26,"nodeType":"366","messageId":"367","endLine":12,"endColumn":41},{"ruleId":"350","severity":1,"message":"414","line":20,"column":8,"nodeType":"352","endLine":20,"endColumn":20,"suggestions":"415"},{"ruleId":"359","severity":1,"message":"360","line":88,"column":69,"nodeType":"361","endLine":88,"endColumn":117},{"ruleId":"374","severity":1,"message":"375","line":89,"column":73,"nodeType":"361","endLine":89,"endColumn":100},{"ruleId":"364","severity":1,"message":"365","line":20,"column":12,"nodeType":"366","messageId":"367","endLine":20,"endColumn":24},{"ruleId":"364","severity":1,"message":"413","line":20,"column":26,"nodeType":"366","messageId":"367","endLine":20,"endColumn":41},{"ruleId":"350","severity":1,"message":"416","line":31,"column":8,"nodeType":"352","endLine":31,"endColumn":10,"suggestions":"417"},{"ruleId":"350","severity":1,"message":"418","line":40,"column":8,"nodeType":"352","endLine":40,"endColumn":37,"suggestions":"419"},{"ruleId":"359","severity":1,"message":"360","line":114,"column":69,"nodeType":"361","endLine":114,"endColumn":117},{"ruleId":"374","severity":1,"message":"375","line":115,"column":73,"nodeType":"361","endLine":115,"endColumn":100},{"ruleId":"364","severity":1,"message":"365","line":16,"column":12,"nodeType":"366","messageId":"367","endLine":16,"endColumn":24},{"ruleId":"364","severity":1,"message":"413","line":16,"column":26,"nodeType":"366","messageId":"367","endLine":16,"endColumn":41},{"ruleId":"350","severity":1,"message":"420","line":24,"column":8,"nodeType":"352","endLine":24,"endColumn":20,"suggestions":"421"},{"ruleId":"364","severity":1,"message":"365","line":11,"column":12,"nodeType":"366","messageId":"367","endLine":11,"endColumn":24},{"ruleId":"364","severity":1,"message":"413","line":11,"column":26,"nodeType":"366","messageId":"367","endLine":11,"endColumn":41},{"ruleId":"350","severity":1,"message":"422","line":22,"column":8,"nodeType":"352","endLine":22,"endColumn":20,"suggestions":"423"},{"ruleId":"359","severity":1,"message":"360","line":108,"column":69,"nodeType":"361","endLine":108,"endColumn":117},{"ruleId":"374","severity":1,"message":"375","line":109,"column":73,"nodeType":"361","endLine":109,"endColumn":100},{"ruleId":"364","severity":1,"message":"365","line":33,"column":12,"nodeType":"366","messageId":"367","endLine":33,"endColumn":24},{"ruleId":"364","severity":1,"message":"413","line":33,"column":26,"nodeType":"366","messageId":"367","endLine":33,"endColumn":41},{"ruleId":"350","severity":1,"message":"424","line":40,"column":8,"nodeType":"352","endLine":40,"endColumn":26,"suggestions":"425"},{"ruleId":"359","severity":1,"message":"360","line":134,"column":45,"nodeType":"361","endLine":134,"endColumn":93},{"ruleId":"374","severity":1,"message":"375","line":135,"column":49,"nodeType":"361","endLine":135,"endColumn":76},{"ruleId":"374","severity":1,"message":"375","line":174,"column":35,"nodeType":"361","endLine":174,"endColumn":62},{"ruleId":"374","severity":1,"message":"375","line":197,"column":31,"nodeType":"361","endLine":197,"endColumn":58},{"ruleId":"374","severity":1,"message":"375","line":229,"column":37,"nodeType":"361","endLine":229,"endColumn":64},{"ruleId":"374","severity":1,"message":"375","line":252,"column":33,"nodeType":"361","endLine":252,"endColumn":60},{"ruleId":"374","severity":1,"message":"375","line":275,"column":33,"nodeType":"361","endLine":275,"endColumn":60},{"ruleId":"374","severity":1,"message":"375","line":309,"column":29,"nodeType":"361","endLine":309,"endColumn":56},{"ruleId":"374","severity":1,"message":"375","line":327,"column":27,"nodeType":"361","endLine":327,"endColumn":54},{"ruleId":"364","severity":1,"message":"426","line":5,"column":10,"nodeType":"366","messageId":"367","endLine":5,"endColumn":20},{"ruleId":"362","severity":1,"message":"363","line":24,"column":25,"nodeType":"361","endLine":24,"endColumn":154},{"ruleId":"385","severity":1,"message":"386","line":16,"column":14,"nodeType":"387","messageId":"388","endLine":16,"endColumn":16},{"ruleId":"385","severity":1,"message":"386","line":54,"column":50,"nodeType":"387","messageId":"388","endLine":54,"endColumn":52},{"ruleId":"381","severity":1,"message":"382","line":83,"column":5,"nodeType":"383","messageId":"384","endLine":94,"endColumn":6},{"ruleId":"385","severity":1,"message":"386","line":108,"column":26,"nodeType":"387","messageId":"388","endLine":108,"endColumn":28},{"ruleId":"385","severity":1,"message":"386","line":109,"column":38,"nodeType":"387","messageId":"388","endLine":109,"endColumn":40},{"ruleId":"385","severity":1,"message":"386","line":109,"column":72,"nodeType":"387","messageId":"388","endLine":109,"endColumn":74},{"ruleId":"385","severity":1,"message":"386","line":111,"column":38,"nodeType":"387","messageId":"388","endLine":111,"endColumn":40},{"ruleId":"385","severity":1,"message":"386","line":111,"column":72,"nodeType":"387","messageId":"388","endLine":111,"endColumn":74},{"ruleId":"385","severity":1,"message":"386","line":111,"column":107,"nodeType":"387","messageId":"388","endLine":111,"endColumn":109},{"ruleId":"385","severity":1,"message":"386","line":168,"column":34,"nodeType":"387","messageId":"388","endLine":168,"endColumn":36},{"ruleId":"385","severity":1,"message":"386","line":170,"column":41,"nodeType":"387","messageId":"388","endLine":170,"endColumn":43},{"ruleId":"385","severity":1,"message":"386","line":175,"column":34,"nodeType":"387","messageId":"388","endLine":175,"endColumn":36},{"ruleId":"385","severity":1,"message":"386","line":177,"column":41,"nodeType":"387","messageId":"388","endLine":177,"endColumn":43},{"ruleId":"385","severity":1,"message":"386","line":179,"column":41,"nodeType":"387","messageId":"388","endLine":179,"endColumn":43},{"ruleId":"385","severity":1,"message":"386","line":209,"column":29,"nodeType":"387","messageId":"388","endLine":209,"endColumn":31},{"ruleId":"385","severity":1,"message":"386","line":236,"column":29,"nodeType":"387","messageId":"388","endLine":236,"endColumn":31},{"ruleId":"385","severity":1,"message":"386","line":275,"column":50,"nodeType":"387","messageId":"388","endLine":275,"endColumn":52},{"ruleId":"385","severity":1,"message":"386","line":302,"column":29,"nodeType":"387","messageId":"388","endLine":302,"endColumn":31},{"ruleId":"427","severity":1,"message":"428","line":5,"column":5,"nodeType":"429","messageId":"430","endLine":8,"endColumn":6},{"ruleId":"374","severity":1,"message":"375","line":13,"column":17,"nodeType":"361","endLine":13,"endColumn":73},{"ruleId":"385","severity":1,"message":"386","line":10,"column":29,"nodeType":"387","messageId":"388","endLine":10,"endColumn":31},{"ruleId":"359","severity":1,"message":"360","line":10,"column":40,"nodeType":"361","endLine":10,"endColumn":83},{"ruleId":"374","severity":1,"message":"375","line":9,"column":13,"nodeType":"361","endLine":9,"endColumn":100},{"ruleId":"374","severity":1,"message":"375","line":16,"column":64,"nodeType":"361","endLine":16,"endColumn":91},{"ruleId":"374","severity":1,"message":"375","line":29,"column":64,"nodeType":"361","endLine":29,"endColumn":91},"no-native-reassign",["431"],"no-negated-in-lhs",["432"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'GetPlayers'. Either include it or remove the dependency array.","ArrayExpression",["433"],["434"],"valid-typeof","Invalid typeof comparison value.","Literal","invalidValue","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-unused-vars","'errorMessage' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'currentPlayer' and 'user'. Either include them or remove the dependency array.",["435"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'confirmUserSignUp' is defined but never used.","'confirmPasswordFocused' is assigned a value but never used.","'setAuthenticationSuccesful' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'PasswordErrorMessage', 'password', and 'schema'. Either include them or remove the dependency array.",["436"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'password'. Either include it or remove the dependency array.",["437"],"Assignments to the 'errorMessage' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useEffect has missing dependencies: 'authenticationCode.length' and 'confirmSignUp'. Either include them or remove the dependency array.",["438"],"React Hook useEffect has a missing dependency: 'validateCredentials'. Either include it or remove the dependency array.",["439"],"'authCodeError' is assigned a value but never used.","'setAuthCodeError' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'PasswordErrorMessage', 'password', 'resetPassword', and 'schema'. Either include them or remove the dependency array.",["440"],"React Hook useEffect has a missing dependency: 'resetPassword'. Either include it or remove the dependency array.",["441"],["442"],"'useAuthState' is defined but never used.","'changePassword' is defined but never used.","'Oval' is defined but never used.",["443"],"React Hook useEffect has a missing dependency: 'startTime'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTimeTaken' needs the current value of 'startTime'.",["444"],"React Hook useEffect has missing dependencies: 'CreateAttempt', 'currentPlayer.player.NickName', 'difficulty', 'levelCompleted', 'levels', 'props.GameName', 'props.SkillName', and 'user'. Either include them or remove the dependency array. You can also do a functional update 'setDifficulty(d => ...)' if you only need 'difficulty' in the 'setDifficulty' call.",["445"],"React Hook useEffect has a missing dependency: 'GetLevelprogress'. Either include it or remove the dependency array.",["446"],"'setErrorMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ShuffleCards' and 'props.shuffledImages.incorrect'. Either include them or remove the dependency array.",["447"],"React Hook useEffect has a missing dependency: 'props.shuffledImages'. Either include it or remove the dependency array.",["448"],"React Hook useEffect has missing dependencies: 'ShuffleCards', 'characters.character1', 'characters.character2', 'characters.character3', and 'characters.character4'. Either include them or remove the dependency array.",["449"],"React Hook useEffect has a missing dependency: 'setChar'. Either include it or remove the dependency array.",["450"],"React Hook useEffect has missing dependencies: 'ShuffleCards', 'props.shuffledImages.Full.incorrect', and 'props.shuffledImages.Zoom.incorrect'. Either include them or remove the dependency array.",["451"],"React Hook useEffect has missing dependencies: 'difficulty' and 'props.attemptNumber'. Either include them or remove the dependency array.",["452"],"'RiUserFill' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation",{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"457","fix":"473"},{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"490","fix":"491"},"Update the dependencies array to be: [GetPlayers]",{"range":"492","text":"493"},"Update the dependencies array to be: [GetPlayers, newPlayerCreated]",{"range":"494","text":"495"},"Update the dependencies array to be: [currentPlayer, user]",{"range":"496","text":"497"},"Update the dependencies array to be: [PasswordErrorMessage, password, passwordFocused, schema]",{"range":"498","text":"499"},"Update the dependencies array to be: [confirmPassword, password]",{"range":"500","text":"501"},"Update the dependencies array to be: [authenticationCode.length, autoCompleteSignUp, confirmSignUp]",{"range":"502","text":"503"},"Update the dependencies array to be: [email, password, confirmPassword, confirmPasswordError, validateCredentials]",{"range":"504","text":"505"},"Update the dependencies array to be: [PasswordErrorMessage, password, passwordFocused, resetPassword, schema]",{"range":"506","text":"507"},"Update the dependencies array to be: [confirmResetPassword, resetPassword]",{"range":"508","text":"509"},"Update the dependencies array to be: [authCode, resetPassword, confirmResetPassword, confirmResetPasswordError, validateCredentials]",{"range":"510","text":"511"},{"range":"512","text":"497"},"Update the dependencies array to be: [finishTime, startTime]",{"range":"513","text":"514"},"Update the dependencies array to be: [CreateAttempt, currentPlayer.player.NickName, difficulty, levelCompleted, levels, props.GameName, props.SkillName, timeTaken, user]",{"range":"515","text":"516"},"Update the dependencies array to be: [GetLevelprogress]",{"range":"517","text":"518"},"Update the dependencies array to be: [ShuffleCards, difficulty, props.shuffledImages.incorrect]",{"range":"519","text":"520"},"Update the dependencies array to be: [props.shuffledImages]",{"range":"521","text":"522"},"Update the dependencies array to be: [difficulty, charactersReady, characters.character1, characters.character2, characters.character3, characters.character4, ShuffleCards]",{"range":"523","text":"524"},"Update the dependencies array to be: [difficulty, setChar]",{"range":"525","text":"526"},"Update the dependencies array to be: [ShuffleCards, difficulty, props.shuffledImages.Full.incorrect, props.shuffledImages.Zoom.incorrect]",{"range":"527","text":"528"},"Update the dependencies array to be: [difficulty, props.attemptNumber, props.popupState]",{"range":"529","text":"530"},[3522,3524],"[GetPlayers]",[4010,4028],"[GetPlayers, newPlayerCreated]",[1292,1294],"[currentPlayer, user]",[3378,3395],"[PasswordErrorMessage, password, passwordFocused, schema]",[4318,4335],"[confirmPassword, password]",[5137,5157],"[authenticationCode.length, autoCompleteSignUp, confirmSignUp]",[5467,5523],"[email, password, confirmPassword, confirmPasswordError, validateCredentials]",[2906,2923],"[PasswordErrorMessage, password, passwordFocused, resetPassword, schema]",[3896,3918],"[confirmResetPassword, resetPassword]",[5177,5251],"[authCode, resetPassword, confirmResetPassword, confirmResetPasswordError, validateCredentials]",[927,929],[2854,2866],"[finishTime, startTime]",[3602,3613],"[CreateAttempt, currentPlayer.player.NickName, difficulty, levelCompleted, levels, props.GameName, props.SkillName, timeTaken, user]",[2299,2301],"[GetLevelprogress]",[711,723],"[ShuffleCards, difficulty, props.shuffledImages.incorrect]",[1157,1159],"[props.shuffledImages]",[1464,1493],"[difficulty, charactersReady, characters.character1, characters.character2, characters.character3, characters.character4, ShuffleCards]",[938,950],"[difficulty, setChar]",[833,845],"[ShuffleCards, difficulty, props.shuffledImages.Full.incorrect, props.shuffledImages.Zoom.incorrect]",[1704,1722],"[difficulty, props.attemptNumber, props.popupState]"]